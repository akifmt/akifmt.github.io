<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>dotnet on akifmt</title><link>https://akifmt.github.io/dotnet/</link><description>Recent content in dotnet on akifmt</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 15 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://akifmt.github.io/dotnet/index.xml" rel="self" type="application/rss+xml"/><item><title>Blazor .NET 8 Microservices Blazor Client and Securing API with Duende Identity Server</title><link>https://akifmt.github.io/dotnet/2024-03-15-blazor-.net8-microservices-blazor-client-and-securing-api-with-duende-identity-server/</link><pubDate>Fri, 15 Mar 2024 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2024-03-15-blazor-.net8-microservices-blazor-client-and-securing-api-with-duende-identity-server/</guid><description>Blazor .NET 8 Microservices Blazor Client and Securing API with Duende Identity Server A Blazor .NET 8 microservices client application and integrates it with Duende Identity Server for securing the API endpoints. The code demonstrates the configuration of services, authentication, authorization, and HTTP request pipeline setup.
Blazor: Blazor is a framework for building interactive web UIs using C# instead of JavaScript. It allows developers to create web applications using .</description></item><item><title>Blazor .NET 8 and Minimal APIs Native AOT CRUD</title><link>https://akifmt.github.io/dotnet/2024-02-12-blazor-.net8-and-minimal-apis-native-aot-crud/</link><pubDate>Mon, 12 Feb 2024 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2024-02-12-blazor-.net8-and-minimal-apis-native-aot-crud/</guid><description>Blazor .NET 8 and Minimal APIs Native AOT CRUD Let&amp;rsquo;s briefly discuss the key concepts involved in this Blazor app and Minimal APIs Native AOT CRUD implementation:
Blazor: Blazor is a web framework that allows developers to build interactive web UIs using C# instead of JavaScript. It enables the development of single-page applications (SPAs) with the power of .NET.
Minimal APIs: Minimal APIs is a new feature introduced in .</description></item><item><title>Blazor .NET 8 Object Mapping with AutoMapper</title><link>https://akifmt.github.io/dotnet/2024-02-09-blazor-.net8-object-mapping-with-automapper/</link><pubDate>Fri, 09 Feb 2024 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2024-02-09-blazor-.net8-object-mapping-with-automapper/</guid><description>Blazor .NET 8 Object Mapping with AutoMapper How to perform object mapping in a Blazor application using AutoMapper. Object mapping is the process of converting one object type to another, which can be useful when transferring data between different layers of an application or when displaying data in a different format.
AutoMapper: AutoMapper is a popular object-to-object mapping library in the .NET ecosystem. It simplifies the process of mapping one object to another by automatically matching properties with similar names and types.</description></item><item><title>Blazor .NET 8 Object Mapping with Mapster</title><link>https://akifmt.github.io/dotnet/2024-01-24-blazor-.net8-object-mapping-with-mapster/</link><pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2024-01-24-blazor-.net8-object-mapping-with-mapster/</guid><description>Blazor .NET 8 Object Mapping with Mapster In a Blazor application, object mapping is a common task that involves converting data from one object type to another. This is often required when working with data transfer objects (DTOs) or when mapping data between different layers of an application. Mapster is a popular mapping library in the .NET ecosystem that provides a simple and efficient way to perform object mapping in Blazor applications.</description></item><item><title>Blazor .NET 8 Migrating app from .NET 6 or .NET 7 to .NET 8</title><link>https://akifmt.github.io/dotnet/2024-01-20-blazor-.net8-migrating-app-from-.net-6-or-.net-7-to-.net-8/</link><pubDate>Sat, 20 Jan 2024 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2024-01-20-blazor-.net8-migrating-app-from-.net-6-or-.net-7-to-.net-8/</guid><description>Blazor .NET 8 Migrating app from .NET 6 or .NET 7 to .NET 8 Migrating your Blazor app from .NET 6 or .NET 7 to .NET 8 can bring several benefits, including improved performance, enhanced features, and bug fixes. Here are the steps you can follow to migrate your app successfully.
(Old) Request Flow Request → _Host → App → Component
(New) Request Flow Request → App → Routes → Component</description></item><item><title>Blazor .NET 8 Server-side Rendering (SSR)</title><link>https://akifmt.github.io/dotnet/2024-01-16-blazor-.net8-server-side-rendering-ssr/</link><pubDate>Tue, 16 Jan 2024 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2024-01-16-blazor-.net8-server-side-rendering-ssr/</guid><description>Blazor .NET 8 Server-side Rendering (SSR) Blazor .NET 8 offers several rendering options, including Server-side Rendering (SSR). SSR allows the initial rendering of a Blazor application to be performed on the server before being sent to the client. This approach provides benefits such as improved performance, SEO-friendliness, and better accessibility.
In Blazor .NET 8, there are two main ways to implement SSR: Global SSR with Prerendering and Per Page/Component SSR with Prerendering.</description></item><item><title>Blazor .NET 8 Hosting Models</title><link>https://akifmt.github.io/dotnet/2024-01-13-blazor-.net8-hosting-models/</link><pubDate>Sat, 13 Jan 2024 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2024-01-13-blazor-.net8-hosting-models/</guid><description>Blazor .NET8 Hosting Models Blazor, a web framework developed by Microsoft, offers three hosting models: Blazor Server, Blazor WebAssembly, and Blazor Hybrid. Each hosting model has its own unique characteristics and use cases.
Blazor Server With the Blazor Server hosting model, components are executed on the server from within an ASP.NET Core app. UI updates, event handling, and JavaScript calls are handled over a SignalR connection using the WebSockets protocol.</description></item><item><title>Blazor Infinite Scrolling</title><link>https://akifmt.github.io/dotnet/2023-10-16-blazor-infinite-scrolling/</link><pubDate>Mon, 16 Oct 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-10-16-blazor-infinite-scrolling/</guid><description>Blazor Infinite Scrolling Blazor: Blazor is a web framework developed by Microsoft that allows developers to build interactive web UIs using C# instead of JavaScript. It enables full-stack web development with .NET.
Infinite Scrolling: Infinite scrolling is a technique where new data is loaded and displayed as the user scrolls down the page. It provides a smooth and continuous browsing experience without the need for manual pagination.
Razor Components: Razor Components is a part of Blazor that allows developers to build reusable UI components using a combination of HTML and C#.</description></item><item><title>Blazor Export Data to Word, Excel, PDF, CSV</title><link>https://akifmt.github.io/dotnet/2023-09-26-blazor-export-data-to-word-excel-pdf-csv/</link><pubDate>Tue, 26 Sep 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-09-26-blazor-export-data-to-word-excel-pdf-csv/</guid><description>Blazor Export Data to Word, Excel, PDF, CSV We will explore how to export data to various file formats such as Word, Excel, PDF, and CSV using Blazor, a web framework for building interactive user interfaces.
Blazor: Blazor is a web framework that allows developers to build interactive web applications using C# instead of JavaScript. It enables the creation of rich UI components and provides a seamless integration between the client and server.</description></item><item><title>Blazor External Login Identity Provider Google, Facebook, Microsoft, Twitter</title><link>https://akifmt.github.io/dotnet/2023-09-21-blazor-external-login-identity-provider/</link><pubDate>Thu, 21 Sep 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-09-21-blazor-external-login-identity-provider/</guid><description>Blazor External Login Identity Provider Google, Facebook, Microsoft, Twitter we will explore how to configure external login identity providers in a Blazor application using the appsettings.json file. We will specifically focus on configuring Google, Facebook, Microsoft, and Twitter as external login providers.
Blazor: Blazor is a web framework that allows developers to build interactive web UIs using C# instead of JavaScript. It enables full-stack development with .NET.
Authentication: Authentication is the process of verifying the identity of a user.</description></item><item><title>Blazor Radzen Loading on Page</title><link>https://akifmt.github.io/dotnet/2023-09-10-blazor-radzen-loading-on-page/</link><pubDate>Sun, 10 Sep 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-09-10-blazor-radzen-loading-on-page/</guid><description>Blazor Radzen Loading on Page Blazor: Blazor is a web framework that allows developers to build interactive web UIs using C# instead of JavaScript. It enables full-stack development with .NET.
Radzen: Radzen is a set of UI components for Blazor that provides ready-to-use components for building responsive and user-friendly web applications.
Loading Indicator: A loading indicator is a visual element that indicates the progress of an ongoing operation, such as data loading or processing.</description></item><item><title>Blazor Send Email with MailKit</title><link>https://akifmt.github.io/dotnet/2023-09-03-blazor-send-email-with-mailkit/</link><pubDate>Sun, 03 Sep 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-09-03-blazor-send-email-with-mailkit/</guid><description>Blazor Send Email with MailKit How to send emails using MailKit in a Blazor application. MailKit is a cross-platform .NET library that provides a simple and efficient way to send and receive emails. We will create a class called EmailConfiguration to store the email server configuration settings.
MailKit: MailKit is an open-source .NET library that provides a high-level API for sending and receiving emails using various protocols such as SMTP, POP3, and IMAP.</description></item><item><title>Blazor Redis as Backplane</title><link>https://akifmt.github.io/dotnet/2023-08-30-blazor-redis-as-backplane/</link><pubDate>Wed, 30 Aug 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-08-30-blazor-redis-as-backplane/</guid><description>Blazor Redis as Backplane (with Master and Slave) Blazor: Blazor is a web framework developed by Microsoft that allows developers to build interactive web applications using C# instead of JavaScript. It enables the creation of single-page applications (SPAs) that run entirely in the browser.
Redis: Redis is an open-source, in-memory data structure store that can be used as a database, cache, and message broker. It provides high-performance data storage and retrieval, making it suitable for use in applications that require fast and scalable data access.</description></item><item><title>Blazor Resize and Upload Images</title><link>https://akifmt.github.io/dotnet/2023-08-25-blazor-resize-and-upload-images/</link><pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-08-25-blazor-resize-and-upload-images/</guid><description>Blazor Resize and Upload Images Upload and save images in a Blazor application using C#. We will cover the process of uploading an image, resizing it if necessary, generating a random file name, and saving it to the server&amp;rsquo;s wwwroot directory.
InputFile: The InputFile component in Blazor allows users to select files from their local system. It triggers an event when the file selection changes.
File Size Limit: We can set a maximum file size limit to restrict the size of the uploaded image.</description></item><item><title>Blazor Scheduling with Quartz.NET</title><link>https://akifmt.github.io/dotnet/2023-08-18-blazor-scheduling-with-quartz.net/</link><pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-08-18-blazor-scheduling-with-quartz.net/</guid><description>Blazor Scheduling with Quartz.NET Blazor: Blazor is a web framework that allows developers to build interactive web UIs using C# instead of JavaScript. It enables full-stack development with .NET.
Quartz.NET: Quartz.NET is a popular open-source job scheduling library for .NET applications. It provides a flexible and powerful way to schedule and execute jobs at specified intervals.
Scheduling: Scheduling refers to the process of defining when and how often a job or task should be executed.</description></item><item><title>Blazor Serilog Logging to Console, File and Database</title><link>https://akifmt.github.io/dotnet/2023-08-15-blazor-serilog-logging/</link><pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-08-15-blazor-serilog-logging/</guid><description>Blazor Serilog Logging to Console, File and Database Logging: Logging is the process of recording events, messages, or exceptions that occur during the execution of an application. It helps developers understand the behavior of the application, diagnose issues, and track its performance. Logging is an essential aspect of software development and plays a crucial role in maintaining and troubleshooting applications.
Serilog: Serilog is a popular logging library for .NET applications.</description></item><item><title>Blazor Implementing Google reCAPTCHA v2</title><link>https://akifmt.github.io/dotnet/2023-08-13-blazor-implementing-google-recaptcha-v2/</link><pubDate>Sun, 13 Aug 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-08-13-blazor-implementing-google-recaptcha-v2/</guid><description>Blazor Implementing Google reCAPTCHA v2 How to implement Google reCAPTCHA v2 in a Blazor application using C#. Google reCAPTCHA is a free service provided by Google that helps protect websites from spam and abuse. It uses advanced risk analysis techniques to distinguish between humans and bots.
Site Key: A unique key provided by Google when you register your website to use reCAPTCHA. It is used to identify your website when making API requests.</description></item><item><title>Blazor Implementing Google reCAPTCHA v3</title><link>https://akifmt.github.io/dotnet/2023-08-11-blazor-implementing-google-recaptcha-v3/</link><pubDate>Fri, 11 Aug 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-08-11-blazor-implementing-google-recaptcha-v3/</guid><description>Blazor Implementing Google reCAPTCHA v3 Google reCAPTCHA v3 in a Blazor application. Google reCAPTCHA is a service that helps protect websites from spam and abuse by verifying that the user is a human and not a bot. reCAPTCHA v3 is the latest version of this service and provides a seamless user experience without requiring any user interaction.
Site Key: A unique identifier for your website, obtained from the reCAPTCHA admin console.</description></item><item><title>Blazor Radzen Globalization and Localization</title><link>https://akifmt.github.io/dotnet/2023-08-09-blazor-radzen-globalization-and-localization/</link><pubDate>Wed, 09 Aug 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-08-09-blazor-radzen-globalization-and-localization/</guid><description>Blazor Radzen Globalization and Localization The concept of globalization and localization in Blazor, a popular framework for building web applications. We will specifically focus on how to implement globalization and localization using Radzen, a set of UI components for Blazor. We will explore the code provided and understand its functionality.
Globalization: Globalization refers to the process of designing and developing applications that can be adapted to various cultures and languages.</description></item><item><title>Blazor Using NPM Packages</title><link>https://akifmt.github.io/dotnet/2023-08-07-blazor-using-npm-packages/</link><pubDate>Mon, 07 Aug 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-08-07-blazor-using-npm-packages/</guid><description>Blazor Using NPM Packages Create a new folder named npm_packages in your Blazor project.
Open the npm_packages folder directory via command prompt and run the following command to initialize NPM in the application:
npm init -y This will create a new package.json file in the npm_packages directory.
Install the webpack and webpack-cli packages as development dependencies by running the following command: npm install webpack webpack-cli --save-dev Modify the scripts section of the package.</description></item><item><title>Blazor Generic Components</title><link>https://akifmt.github.io/dotnet/2023-08-05-blazor-generic-components/</link><pubDate>Sat, 05 Aug 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-08-05-blazor-generic-components/</guid><description>Blazor Generic Components We will explore a Blazor generic component that can be used for performing CRUD (Create, Read, Update, Delete) operations on a list of items. This component is designed to provide a reusable and efficient solution for displaying and managing data in a Blazor application.
Blazor: Blazor is a web framework that allows developers to build interactive web UIs using C# instead of JavaScript. It enables full-stack development with .</description></item><item><title>Blazor Expose a Feed as RSS</title><link>https://akifmt.github.io/dotnet/2023-08-02-blazor-rssfeed/</link><pubDate>Wed, 02 Aug 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-08-02-blazor-rssfeed/</guid><description>Blazor Expose a Feed as RSS In this example, we will explore how to expose a feed as RSS using C# and the Blazor framework. We will create a controller that generates an RSS feed based on mock data.
RSS (Really Simple Syndication): RSS is a web feed format used to publish frequently updated content, such as blog posts, news headlines, or podcasts. It allows users to subscribe to a website&amp;rsquo;s content and receive updates in a standardized format.</description></item><item><title>Blazor EF Migrations with Multiple Providers</title><link>https://akifmt.github.io/dotnet/2023-07-31-blazor-ef-multipledbproviders/</link><pubDate>Mon, 31 Jul 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-07-31-blazor-ef-multipledbproviders/</guid><description>Blazor Blazor Entity Framework Migrations with Multiple Providers This code demonstrates how to implement multiple database providers in a Blazor application using C#. It allows you to switch between different database providers, such as InMemory, SQLite, and SQL Server, based on the configuration settings.
Database Provider: Refers to the type of database being used, such as InMemory, SQLite, or SQL Server.
Connection String: A string that contains the necessary information to connect to a specific database.</description></item><item><title>Blazor Authentication and Authorization</title><link>https://akifmt.github.io/dotnet/2023-07-30-blazor-authentication-authorization/</link><pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-07-30-blazor-authentication-authorization/</guid><description>Blazor Authentication and Authorization This example represents a Blazor application that allows users to view a list of blog posts. The application uses ASP.NET Core and Blazor authentication and authorization to control access to the blog posts.
Before diving into the code, let&amp;rsquo;s understand some key concepts related to Blazor:
Blazor: Blazor is a web framework that allows developers to build interactive web UIs using C# instead of JavaScript. It enables developers to write code that runs on the client-side in the browser using WebAssembly or on the server-side using SignalR.</description></item><item><title>Blazor Radzen CRUD</title><link>https://akifmt.github.io/dotnet/2023-07-26-blazor-radzen-crud/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-07-26-blazor-radzen-crud/</guid><description>Blazor Radzen CRUD In this article, we will explore the code for a Blazor page called &amp;ldquo;BlogPost&amp;rdquo;. This page displays a list of blog posts using a RadzenDataGrid component. We will go through the key concepts, code structure, and code examples to understand how this page works.
Before diving into the code, let&amp;rsquo;s understand some key concepts related to Blazor and RadzenDataGrid:
Blazor: Blazor is a web framework that allows developers to build interactive web UIs using C# instead of JavaScript.</description></item><item><title>Blazor Radzen Search Comp.</title><link>https://akifmt.github.io/dotnet/2023-07-21-blazor-radzen-searchcomponent/</link><pubDate>Fri, 21 Jul 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-07-21-blazor-radzen-searchcomponent/</guid><description>Blazor Radzen SearchComponent 1. Blazor Radzen List Page The code provided is a Blazor component that demonstrates how to fetch data from a service and display it in a RadzenDataList component. It also includes a custom search component that allows users to search for specific blog posts.
Blazor: Blazor is a web framework for building interactive client-side web applications using C# instead of JavaScript. It allows developers to write code in C# that runs on the client-side, eliminating the need for JavaScript.</description></item><item><title>Blazor Plyr Video Player</title><link>https://akifmt.github.io/dotnet/2023-07-20-blazor-plyr-video-player/</link><pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-07-20-blazor-plyr-video-player/</guid><description>Blazor Plyr Video Player This code provides a video player component in a Blazor application. It allows users to watch videos with controls and captions. The video player is customizable using the Plyr.io library.
Blazor: Blazor is a web framework that allows developers to build interactive web UIs using C# instead of JavaScript. It enables full-stack development with .NET. Plyr.io: Plyr.io is a JavaScript library that provides a customizable video player with a modern UI.</description></item></channel></rss>