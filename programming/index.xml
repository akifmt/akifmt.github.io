<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programmings on akifmt</title><link>https://akifmt.github.io/programming/</link><description>Recent content in Programmings on akifmt</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 01 Jan 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://akifmt.github.io/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Abstraction and Generalization</title><link>https://akifmt.github.io/programming/05-programming05/</link><pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/programming/05-programming05/</guid><description>Abstraction: Abstraction is an emphasis on the idea, qualities and properties rather than the particulars (a suppression of detail). The importance of abstraction is derived from its ability to hide irrelevant details and from the use of names to reference objects. Abstraction is essential in the construction of programs. It places the emphasis on what an object is or does rather than how it is represented or how it works. Thus, it is the primary means of managing complexity in large programs.</description></item><item><title>Association, Aggregation, Composition</title><link>https://akifmt.github.io/programming/04-programming04/</link><pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/programming/04-programming04/</guid><description>Association: A relationship where all objects have their own lifecycle and there is no owner. Aggregation: A specialised form of Association where all objects have their own lifecycle, but there is ownership and child objects can not belong to another parent object. Composition: A specialised form of Aggregation and we can call this as a “death” relationship. It is a strong type of Aggregation. Child object does not have its lifecycle and if parent object is deleted, all child objects will also be deleted.</description></item><item><title>How to identify and design a Class?</title><link>https://akifmt.github.io/programming/02-programming02oop/</link><pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/programming/02-programming02oop/</guid><description>According to Object Oriented Design Principles, there are five principles when design a class.
SRP (The Single Responsibility Principle) A class should have one, and only one, reason to change. OCP (The Open Closed Principle) Should be able to extend any classes' behaviors, without modifying the classes.. LSP (The Liskov Substitution Principle) Derived classes must be substitutable for their base classes. DIP (The Dependency Inversion Principle) Depend on abstractions, not on concretions.</description></item><item><title>Programming</title><link>https://akifmt.github.io/programming/00-intro/</link><pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/programming/00-intro/</guid><description>A programming language is a formal computer language designed to communicate instructions to a machine, particularly a computer. Programming languages can be used to create programs to control the behavior of a machine or to express algorithms. (Source: wikipedia)</description></item><item><title>What is Encapsulation (or Information Hiding)?</title><link>https://akifmt.github.io/programming/03-programming03encapsulation/</link><pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/programming/03-programming03encapsulation/</guid><description>The encapsulation is the inclusion-within a program object-of all the resources needed for the object to function, basically, the methods and the data. In OOP the encapsulation is mainly achieved by creating classes, the classes expose public methods and properties. A class is kind of a container or capsule or a cell, which encapsulate a set of methods, attribute and properties to provide its indented functionalities to other classes. In that sense, encapsulation also allows a class to change its internal implementation without hurting the overall functioning of the system.</description></item><item><title>What is OOP?</title><link>https://akifmt.github.io/programming/01-programming01oop/</link><pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/programming/01-programming01oop/</guid><description>Object Oriented Programming(OOP) is a programming paradigm based on the concept of objects, which may contain data, in the form of fields, often known as attributes; and code, in the form of procedures, often known as methods.
Encapsulation Abstraction Inheritance Polymorphism</description></item></channel></rss>