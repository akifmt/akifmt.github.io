<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dotnet on akifmt</title><link>https://akifmt.github.io/tags/dotnet/</link><description>Recent content in Dotnet on akifmt</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 07 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://akifmt.github.io/tags/dotnet/index.xml" rel="self" type="application/rss+xml"/><item><title>Blazor Using NPM Packages</title><link>https://akifmt.github.io/dotnet/2023-08-07-blazor-using-npm-packages/</link><pubDate>Mon, 07 Aug 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-08-07-blazor-using-npm-packages/</guid><description>Blazor Using NPM Packages Create a new folder named npm_packages in your Blazor project.
Open the npm_packages folder directory via command prompt and run the following command to initialize NPM in the application:
npm init -y This will create a new package.json file in the npm_packages directory.
Install the webpack and webpack-cli packages as development dependencies by running the following command: npm install webpack webpack-cli --save-dev Modify the scripts section of the package.</description></item><item><title>Blazor Generic Components</title><link>https://akifmt.github.io/dotnet/2023-08-05-blazor-generic-components/</link><pubDate>Sat, 05 Aug 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-08-05-blazor-generic-components/</guid><description>Blazor Generic Components We will explore a Blazor generic component that can be used for performing CRUD (Create, Read, Update, Delete) operations on a list of items. This component is designed to provide a reusable and efficient solution for displaying and managing data in a Blazor application.
Blazor: Blazor is a web framework that allows developers to build interactive web UIs using C# instead of JavaScript. It enables full-stack development with .</description></item><item><title>Blazor Expose a Feed as RSS</title><link>https://akifmt.github.io/dotnet/2023-08-02-blazor-rssfeed/</link><pubDate>Wed, 02 Aug 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-08-02-blazor-rssfeed/</guid><description>Blazor Expose a Feed as RSS In this example, we will explore how to expose a feed as RSS using C# and the Blazor framework. We will create a controller that generates an RSS feed based on mock data.
RSS (Really Simple Syndication): RSS is a web feed format used to publish frequently updated content, such as blog posts, news headlines, or podcasts. It allows users to subscribe to a website&amp;rsquo;s content and receive updates in a standardized format.</description></item><item><title>Blazor EF Migrations with Multiple Providers</title><link>https://akifmt.github.io/dotnet/2023-07-31-blazor-ef-multipledbproviders/</link><pubDate>Mon, 31 Jul 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-07-31-blazor-ef-multipledbproviders/</guid><description>Blazor Blazor Entity Framework Migrations with Multiple Providers This code demonstrates how to implement multiple database providers in a Blazor application using C#. It allows you to switch between different database providers, such as InMemory, SQLite, and SQL Server, based on the configuration settings.
Database Provider: Refers to the type of database being used, such as InMemory, SQLite, or SQL Server.
Connection String: A string that contains the necessary information to connect to a specific database.</description></item><item><title>Blazor Authentication and Authorization</title><link>https://akifmt.github.io/dotnet/2023-07-30-blazor-authentication-authorization/</link><pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-07-30-blazor-authentication-authorization/</guid><description>Blazor Authentication and Authorization This example represents a Blazor application that allows users to view a list of blog posts. The application uses ASP.NET Core and Blazor authentication and authorization to control access to the blog posts.
Before diving into the code, let&amp;rsquo;s understand some key concepts related to Blazor:
Blazor: Blazor is a web framework that allows developers to build interactive web UIs using C# instead of JavaScript. It enables developers to write code that runs on the client-side in the browser using WebAssembly or on the server-side using SignalR.</description></item><item><title>Blazor Radzen CRUD</title><link>https://akifmt.github.io/dotnet/2023-07-26-blazor-radzen-crud/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-07-26-blazor-radzen-crud/</guid><description>Blazor Radzen CRUD In this article, we will explore the code for a Blazor page called &amp;ldquo;BlogPost&amp;rdquo;. This page displays a list of blog posts using a RadzenDataGrid component. We will go through the key concepts, code structure, and code examples to understand how this page works.
Before diving into the code, let&amp;rsquo;s understand some key concepts related to Blazor and RadzenDataGrid:
Blazor: Blazor is a web framework that allows developers to build interactive web UIs using C# instead of JavaScript.</description></item><item><title>Blazor Radzen Search Comp.</title><link>https://akifmt.github.io/dotnet/2023-07-21-blazor-radzen-searchcomponent/</link><pubDate>Fri, 21 Jul 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-07-21-blazor-radzen-searchcomponent/</guid><description>Blazor Radzen SearchComponent 1. Blazor Radzen List Page The code provided is a Blazor component that demonstrates how to fetch data from a service and display it in a RadzenDataList component. It also includes a custom search component that allows users to search for specific blog posts.
Blazor: Blazor is a web framework for building interactive client-side web applications using C# instead of JavaScript. It allows developers to write code in C# that runs on the client-side, eliminating the need for JavaScript.</description></item><item><title>Video Player in Blazor</title><link>https://akifmt.github.io/dotnet/2023-07-20-blazor-videoplayer/</link><pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2023-07-20-blazor-videoplayer/</guid><description>Video Player in Blazor This code provides a video player component in a Blazor application. It allows users to watch videos with controls and captions. The video player is customizable using the Plyr.io library.
Blazor: Blazor is a web framework that allows developers to build interactive web UIs using C# instead of JavaScript. It enables full-stack development with .NET. Plyr.io: Plyr.io is a JavaScript library that provides a customizable video player with a modern UI.</description></item></channel></rss>