<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blazor on akifmt</title><link>https://akifmt.github.io/tags/blazor/</link><description>Recent content in Blazor on akifmt</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 16 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://akifmt.github.io/tags/blazor/index.xml" rel="self" type="application/rss+xml"/><item><title>Blazor .NET 8 Autocompile Sass and Less</title><link>https://akifmt.github.io/dotnet/2024-04-16-blazor-.net8-autocompile-sass-and-less/</link><pubDate>Tue, 16 Apr 2024 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2024-04-16-blazor-.net8-autocompile-sass-and-less/</guid><description>Blazor .NET 8 Autocompile Sass and Less Sass: Sass is a CSS preprocessor that simplifies styling by providing features like variables, nesting, and mixins. It allows for more organized and efficient CSS code.
Less: Less is another CSS preprocessor that offers similar features to Sass, enabling developers to write cleaner and more maintainable stylesheets.
Autocompile: Autocompilation refers to the automatic conversion of Sass or Less files into standard CSS files whenever changes are made to the source files.</description></item><item><title>Blazor .NET 8 Microservices 2 Blazor Client Ocelot Gateway and Securing API with Duende Identity Server</title><link>https://akifmt.github.io/dotnet/2024-04-05-blazor-.net8-microservices-2-blazor-client-ocelot-gateway-and-securing-api-with-duende-identity-server/</link><pubDate>Fri, 05 Apr 2024 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2024-04-05-blazor-.net8-microservices-2-blazor-client-ocelot-gateway-and-securing-api-with-duende-identity-server/</guid><description>Blazor .NET 8 Microservices 2 Blazor Client Ocelot Gateway and Securing API with Duende Identity Server Part 1: Demonstrates ASP.NET Core Web API, Blazor Web App and Securing API with Duende Identity Server Click here Part 1
Part 2: Demonstrates Ocelot Gateway in a Blazor .NET 8 application. Click here Part 2
Projects Project Name Port Template Microser.IdS :5001 Duende IdentityServer with Entity Framework Stores (Duende Software) Microser.API.Weather :6001 ASP.</description></item><item><title>Blazor .NET 8 Microservices Blazor Client and Securing API with Duende Identity Server</title><link>https://akifmt.github.io/dotnet/2024-03-15-blazor-.net8-microservices-blazor-client-and-securing-api-with-duende-identity-server/</link><pubDate>Fri, 15 Mar 2024 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2024-03-15-blazor-.net8-microservices-blazor-client-and-securing-api-with-duende-identity-server/</guid><description>Blazor .NET 8 Microservices Blazor Client and Securing API with Duende Identity Server A Blazor .NET 8 microservices client application and integrates it with Duende Identity Server for securing the API endpoints. The code demonstrates the configuration of services, authentication, authorization, and HTTP request pipeline setup.
Blazor: Blazor is a framework for building interactive web UIs using C# instead of JavaScript. It allows developers to create web applications using .</description></item><item><title>Blazor .NET 8 and Minimal APIs Native AOT CRUD</title><link>https://akifmt.github.io/dotnet/2024-02-12-blazor-.net8-and-minimal-apis-native-aot-crud/</link><pubDate>Mon, 12 Feb 2024 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2024-02-12-blazor-.net8-and-minimal-apis-native-aot-crud/</guid><description>Blazor .NET 8 and Minimal APIs Native AOT CRUD Let&amp;rsquo;s briefly discuss the key concepts involved in this Blazor app and Minimal APIs Native AOT CRUD implementation:
Blazor: Blazor is a web framework that allows developers to build interactive web UIs using C# instead of JavaScript. It enables the development of single-page applications (SPAs) with the power of .NET.
Minimal APIs: Minimal APIs is a new feature introduced in .</description></item><item><title>Blazor .NET 8 Object Mapping with AutoMapper</title><link>https://akifmt.github.io/dotnet/2024-02-09-blazor-.net8-object-mapping-with-automapper/</link><pubDate>Fri, 09 Feb 2024 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2024-02-09-blazor-.net8-object-mapping-with-automapper/</guid><description>Blazor .NET 8 Object Mapping with AutoMapper How to perform object mapping in a Blazor application using AutoMapper. Object mapping is the process of converting one object type to another, which can be useful when transferring data between different layers of an application or when displaying data in a different format.
AutoMapper: AutoMapper is a popular object-to-object mapping library in the .NET ecosystem. It simplifies the process of mapping one object to another by automatically matching properties with similar names and types.</description></item><item><title>Blazor .NET 8 Object Mapping with Mapster</title><link>https://akifmt.github.io/dotnet/2024-01-24-blazor-.net8-object-mapping-with-mapster/</link><pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2024-01-24-blazor-.net8-object-mapping-with-mapster/</guid><description>Blazor .NET 8 Object Mapping with Mapster In a Blazor application, object mapping is a common task that involves converting data from one object type to another. This is often required when working with data transfer objects (DTOs) or when mapping data between different layers of an application. Mapster is a popular mapping library in the .NET ecosystem that provides a simple and efficient way to perform object mapping in Blazor applications.</description></item><item><title>Blazor .NET 8 Migrating app from .NET 6 or .NET 7 to .NET 8</title><link>https://akifmt.github.io/dotnet/2024-01-20-blazor-.net8-migrating-app-from-.net-6-or-.net-7-to-.net-8/</link><pubDate>Sat, 20 Jan 2024 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2024-01-20-blazor-.net8-migrating-app-from-.net-6-or-.net-7-to-.net-8/</guid><description>Blazor .NET 8 Migrating app from .NET 6 or .NET 7 to .NET 8 Migrating your Blazor app from .NET 6 or .NET 7 to .NET 8 can bring several benefits, including improved performance, enhanced features, and bug fixes. Here are the steps you can follow to migrate your app successfully.
(Old) Request Flow Request → _Host → App → Component
(New) Request Flow Request → App → Routes → Component</description></item><item><title>Blazor .NET 8 Server-side Rendering (SSR)</title><link>https://akifmt.github.io/dotnet/2024-01-16-blazor-.net8-server-side-rendering-ssr/</link><pubDate>Tue, 16 Jan 2024 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2024-01-16-blazor-.net8-server-side-rendering-ssr/</guid><description>Blazor .NET 8 Server-side Rendering (SSR) Blazor .NET 8 offers several rendering options, including Server-side Rendering (SSR). SSR allows the initial rendering of a Blazor application to be performed on the server before being sent to the client. This approach provides benefits such as improved performance, SEO-friendliness, and better accessibility.
In Blazor .NET 8, there are two main ways to implement SSR: Global SSR with Prerendering and Per Page/Component SSR with Prerendering.</description></item><item><title>Blazor .NET 8 Hosting Models</title><link>https://akifmt.github.io/dotnet/2024-01-13-blazor-.net8-hosting-models/</link><pubDate>Sat, 13 Jan 2024 00:00:00 +0000</pubDate><guid>https://akifmt.github.io/dotnet/2024-01-13-blazor-.net8-hosting-models/</guid><description>Blazor .NET8 Hosting Models Blazor, a web framework developed by Microsoft, offers three hosting models: Blazor Server, Blazor WebAssembly, and Blazor Hybrid. Each hosting model has its own unique characteristics and use cases.
Blazor Server With the Blazor Server hosting model, components are executed on the server from within an ASP.NET Core app. UI updates, event handling, and JavaScript calls are handled over a SignalR connection using the WebSockets protocol.</description></item></channel></rss>