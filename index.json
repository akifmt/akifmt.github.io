[{"categories":null,"contents":" Variable NAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://akifmt.github.io/notes/bash/basic/","summary":" Variable NAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","tags":null,"title":"Bash Variables"},{"categories":null,"contents":" Startup.cs No image display bug fix appsettings.json Uploading Image ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://akifmt.github.io/notes/dotnet/gists/","summary":" Startup.cs No image display bug fix appsettings.json Uploading Image ","tags":null,"title":"Dotnet"},{"categories":["Dotnet","Blazor Generic Components"],"contents":" Blazor Generic Components We will explore a Blazor generic component that can be used for performing CRUD (Create, Read, Update, Delete) operations on a list of items. This component is designed to provide a reusable and efficient solution for displaying and managing data in a Blazor application.\nBlazor: Blazor is a web framework that allows developers to build interactive web UIs using C# instead of JavaScript. It enables full-stack development with .NET, providing a seamless development experience.\nGeneric Components: Generic components in Blazor allow us to create reusable UI components that can work with different types of data. By using generics, we can create components that are flexible and adaptable to various scenarios.\nTModel: The TModel type parameter represents the model class that the component will work with. It must inherit from the BaseModel class.\nTViewModel: The TViewModel type parameter represents the view model class that the component will use to display the data. It must inherit from the BaseViewModel class and have a parameterless constructor.\nIService: The IService\u0026lt;TModel\u0026gt; interface represents a service that provides CRUD (Create, Read, Update, Delete) operations for the TModel class. It is injected into the component to retrieve the data.\nIMapper: The IMapper interface is used for object-to-object mapping. It is injected into the component to map the TModel objects to TViewModel objects.\nNavigationManager: The NavigationManager class provides methods for navigating within a Blazor application. It is injected into the component to handle navigation to different pages.\nLet\u0026rsquo;s break down the code structure:\nNamespace and Using Statements: The code starts with the declaration of the namespace and the necessary using statements.\nType Parameters: The component uses two type parameters, TModel and TViewModel, which represent the model and view model types, respectively. These parameters allow the component to work with different types of data.\nConditional Rendering: The code uses conditional rendering to display a loading message if the listViewModel is null. Otherwise, it renders a table to display the list of items.\nTable Structure: The table structure is defined using HTML markup. The table headers are dynamically generated based on the properties of the TViewModel type. The nameof function is used to get the name of the Id property from the BaseViewModel class, and the GetProperties method is used to iterate over the properties of the TViewModel type.\nData Binding: The table rows are generated using a foreach loop that iterates over the listViewModel collection. The GetProperty and GetValue methods are used to retrieve the values of the properties dynamically. The ToString method is called to convert the values to strings.\nCRUD Links: Each table row includes links for performing CRUD operations on the corresponding item. The NavigateLinkItemDetails, NavigateLinkItemEdit, and NavigateLinkItemDelete properties are used to generate the URLs for the respective operations. The Replace method is used to replace the placeholder {{{id}}} with the actual item ID.\nList Posts (List.razor, List.razor.cs) Let\u0026rsquo;s take a closer look at the code provided in the List\u0026lt;TModel, TViewModel\u0026gt; component:\npublic partial class List\u0026lt;TModel, TViewModel\u0026gt; : ComponentBase where TModel : BaseModel where TViewModel : BaseViewModel, new() { [Parameter, EditorRequired] public string? NavigateLinkItemDetails { get; set; } [Parameter, EditorRequired] public string? NavigateLinkItemEdit { get; set; } [Parameter, EditorRequired] public string? NavigateLinkItemDelete { get; set; } [Inject] private IService\u0026lt;TModel\u0026gt;? _service { get; set; } [Inject] private IMapper? Mapper { get; set; } [Inject] private NavigationManager? NavigationManager { get; set; } private IEnumerable\u0026lt;TViewModel\u0026gt;? listViewModel; protected override async Task OnInitializedAsync() { if (_service == null || Mapper == null) return; var model = await _service.GetAllAsync(); if (model == null) return; listViewModel = Mapper.Map\u0026lt;IEnumerable\u0026lt;TModel\u0026gt;, IEnumerable\u0026lt;TViewModel\u0026gt;\u0026gt;(model); } } In this code, we define the List\u0026lt;TModel, TViewModel\u0026gt; component as a partial class that inherits from ComponentBase. The component has the following members:\nParameters: The component has three parameters: NavigateLinkItemDetails, NavigateLinkItemEdit, and NavigateLinkItemDelete. These parameters are used to specify the navigation links for item details, item edit, and item delete actions.\nInjected Services: The component injects three services: IService\u0026lt;TModel\u0026gt;, IMapper, and NavigationManager. These services are used to retrieve data, map objects, and handle navigation, respectively.\nlistViewModel: This private property holds the list of view models that will be displayed in the component.\nOnInitializedAsync: This method is an overridden method from the ComponentBase class. It is called when the component is initialized. In this method, we check if the injected services are available. If they are, we retrieve the data using the _service and map it to the view models using the Mapper. The resulting view models are assigned to the listViewModel property.\nUsing the Component:\n\u0026lt;BlazorAppGenericComponents.Components.List TModel=\u0026#34;BlogPost\u0026#34; TViewModel=\u0026#34;BlogPostViewModel\u0026#34; NavigateLinkItemDetails=\u0026#34;/BlogPost/Details/{{{id}}}\u0026#34; NavigateLinkItemEdit=\u0026#34;/BlogPost/Edit/{{{id}}}\u0026#34; NavigateLinkItemDelete=\u0026#34;/BlogPost/Delete/{{{id}}}\u0026#34; /\u0026gt; Create Post (Create.razor, Create.razor.cs) @namespace BlazorAppGenericComponents.Components @typeparam TModel @typeparam TViewModel @if (viewModel == null) { \u0026lt;p\u0026gt;\u0026lt;em\u0026gt;Loading...\u0026lt;/em\u0026gt;\u0026lt;/p\u0026gt; } else { \u0026lt;EditForm Context=\u0026#34;editFormComponent\u0026#34; OnValidSubmit=\u0026#34;@HandleValidSubmit\u0026#34; Model=\u0026#34;@viewModel\u0026#34;\u0026gt; @foreach (var property in typeof(TViewModel).GetProperties()) { @if (property.Name != \u0026#34;Id\u0026#34;) { \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;label class=\u0026#34;control-label\u0026#34;\u0026gt;@property.Name\u0026lt;/label\u0026gt; \u0026lt;input @onchange=\u0026#39;((e) =\u0026gt; HandleValueChanged(e, property.Name))\u0026#39; type=\u0026#34;text\u0026#34; value=\u0026#34;@property.GetValue(viewModel)?.ToString()\u0026#34; class=\u0026#34;form-control\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; } } \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Create\u0026#34; class=\u0026#34;btn btn-primary\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/EditForm\u0026gt; } In this code snippet, the component checks if the viewModel is null. If it is null, it displays a loading message. Otherwise, it renders an EditForm component with the viewModel as the model.\nInside the EditForm component, a loop iterates over the properties of the TViewModel type. For each property, a form group is created with a label and an input field. The label displays the name of the property, and the input field is bound to the corresponding property value in the viewModel.\nThe HandleValueChanged method is called whenever the value of an input field changes. It updates the corresponding property value in the viewModel.\nFinally, a submit button is displayed to create the entity.\nThe component has two generic type parameters: TModel and TViewModel. TModel represents the model class for the database entity, while TViewModel represents the view model class for the form.\nThe component has the following properties and dependencies:\nNavigateLinkAfterSubmit: A string parameter that specifies the URL to navigate to after the form is submitted. _service: An instance of the IService\u0026lt;TModel\u0026gt; interface, which is responsible for interacting with the database. Mapper: An instance of the IMapper interface, which is used to map the view model to the model. NavigationManager: An instance of the NavigationManager class, which is used to navigate to the specified URL. The component also has a private field called \u0026ldquo;viewModel\u0026rdquo; of type TViewModel, which represents the current state of the form.\nOnInitialized: This method is called when the component is initialized. It creates a new instance of the view model and assigns it to the \u0026ldquo;viewModel\u0026rdquo; field.\nHandleValidSubmit: This method is called when the form is submitted and passes validation. It maps the view model to the model using the IMapper interface. Then, it calls the AddAsync method of the _service instance to add the model to the database. If the operation is successful, it navigates to the specified URL using the NavigationManager.\nHandleValueChanged: This method is called when the value of an input field in the form changes. It updates the corresponding property of the view model with the new value.\nUsing the Component:\n\u0026lt;BlazorAppGenericComponents.Components.Create TModel=\u0026#34;BlogPost\u0026#34; TViewModel=\u0026#34;BlogPostViewModel\u0026#34; NavigateLinkAfterSubmit=\u0026#34;/BlogPost\u0026#34; /\u0026gt; Details Post (Details.razor, Details.razor.cs) \u0026lt;dl class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;dt class=\u0026#34;col-sm-2\u0026#34;\u0026gt; @nameof(BaseViewModel.Id) \u0026lt;/dt\u0026gt; \u0026lt;dd class=\u0026#34;col-sm-10\u0026#34;\u0026gt; @typeof(TViewModel).GetProperty(nameof(BaseViewModel.Id))?.GetValue(viewModel)?.ToString() \u0026lt;/dd\u0026gt; @foreach (var property in typeof(TViewModel).GetProperties()) { if (property.Name != nameof(BaseViewModel.Id)) { \u0026lt;dt class=\u0026#34;col-sm-2\u0026#34;\u0026gt; @property.Name \u0026lt;/dt\u0026gt; \u0026lt;dd class=\u0026#34;col-sm-10\u0026#34;\u0026gt; @property.GetValue(viewModel)?.ToString() \u0026lt;/dd\u0026gt; } } \u0026lt;/dl\u0026gt; The component has the following properties and dependencies:\nId: An optional parameter that represents the ID of the model for which the details are to be displayed.\n_service: An injected dependency of type IService\u0026lt;TModel\u0026gt;, which is responsible for retrieving the model data.\nMapper: An injected dependency of type IMapper, which is used to map the model to the view model.\nNavigationManager: An injected dependency of type NavigationManager, which is used for navigation within the application.\nviewModel: A private property of type TViewModel, which holds the view model instance.\nThe OnInitializedAsync method is overridden to fetch the model data and map it to the view model. If the Id is null or any of the dependencies are null, the method returns early. Otherwise, it calls the _service.GetbyId method to retrieve the model with the specified ID. If the model is found, it uses the Mapper to map the model to the view model and assigns it to the viewModel property.\nUsing the Component:\n\u0026lt;BlazorAppGenericComponents.Components.Details TModel=\u0026#34;BlogPost\u0026#34; TViewModel=\u0026#34;BlogPostViewModel\u0026#34; Id=\u0026#34;@id\u0026#34; /\u0026gt; Edit Post (Edit.razor, Edit.razor.cs) Let\u0026rsquo;s break down the code structure:\nNamespace and Using Statements: The code starts with the declaration of the namespace and the necessary using statements.\nType Parameters: The component is defined with two type parameters, TModel and TViewModel. These parameters allow the component to work with different models and view models.\nConditional Rendering: The code uses a conditional rendering statement to check if the viewModel is null. If it is null, it displays a loading message. Otherwise, it renders the form for editing the model.\nEditForm Component: The EditForm component is a built-in Blazor component that provides form validation and submission functionality. It is used to wrap the form elements.\nProperty Loop: Inside the EditForm component, a loop is used to iterate over the properties of the TViewModel type. The loop excludes the Id property, as it is usually an identifier and not editable.\nForm Group: For each property, a form group is created with a label and an input field. The onchange event is wired to a method called HandleValueChanged, which handles the value change of the input field.\nSubmit Button: Finally, a submit button is added to the form for saving the changes.\nBlazor generic component named Edit\u0026lt;TModel, TViewModel\u0026gt;. Let\u0026rsquo;s break down its structure:\nNamespace and Dependencies: The component is defined within the BlazorAppGenericComponents.Components namespace. It has dependencies on AutoMapper, BlazorAppGenericComponents.Models, BlazorAppGenericComponents.Services, BlazorAppGenericComponents.ViewModels, and Microsoft.AspNetCore.Components.\nComponent Declaration: The component is declared as a partial class that inherits from ComponentBase. It has two generic type parameters, TModel and TViewModel, which represent the model and view model types, respectively.\nComponent Parameters: The component has two parameters defined using the [Parameter] attribute. The Id parameter is of type int? and represents the identifier of the model to be edited. The NavigateLinkAfterSubmit parameter is of type string? and represents the URL to navigate to after a successful submit.\nDependency Injection: The component injects dependencies for IService\u0026lt;TModel\u0026gt;, IMapper, and NavigationManager using the [Inject] attribute.\nViewModel Initialization: The OnInitializedAsync method is overridden to initialize the view model based on the provided Id parameter. It retrieves the model from the service using the GetbyId method and maps it to the view model using AutoMapper.\nForm Submission: The HandleValidSubmit method is called when the form is submitted. It maps the view model back to the model using AutoMapper and calls the UpdateAsync method of the service to update the model. If the update is successful, it navigates to the specified URL using the NavigationManager.\nValue Change Handling: The HandleValueChanged method is called when the value of an input field changes. It updates the corresponding property of the view model based on the changed value.\nUsing the Component:\n\u0026lt;BlazorAppGenericComponents.Components.Edit TModel=\u0026#34;BlogPost\u0026#34; TViewModel=\u0026#34;BlogPostViewModel\u0026#34; Id=\u0026#34;@id\u0026#34; NavigateLinkAfterSubmit=\u0026#34;/BlogPost\u0026#34; /\u0026gt; Delete Post (Delete.razor, Delete.razor.cs) The code starts with the @namespace directive, which specifies the namespace of the component. It is followed by the @using directive, which imports the necessary namespaces for the component.\nNext, the component declares two type parameters, TModel and TViewModel, using the @typeparam directive. These type parameters represent the model and view model types that will be used with the component.\nThe code then checks if the viewModel variable is null. If it is null, it displays a loading message. Otherwise, it generates the details view for the view model.\nInside the dl element, the code displays the value of the Id property of the view model using the @nameof directive and the GetValue method. It then iterates over the properties of the view model using a foreach loop.\nFor each property, it checks if the property name is not equal to \u0026ldquo;Id\u0026rdquo;. If it is not equal, it displays the property name and its value using the @property.Name and @property.GetValue directives.\nFinally, the code displays a \u0026ldquo;Delete\u0026rdquo; button and attaches an onclick event handler to it.\nThe component has the following properties:\nId: An optional parameter that represents the ID of the record to be deleted.\nNavigateLinkAfterDelete: An optional parameter that specifies the URL to navigate to after the record is deleted.\nThe component also injects the following dependencies:\nIMapper: An object mapper that maps the model to the view model.\nNavigationManager: A service that provides navigation functionality.\nThe component has an OnInitializedAsync method that is called when the component is initialized. It retrieves the record with the specified ID from the service and maps it to the view model using the mapper.\nThe component also has a DeleteButtonClick method that is called when the delete button is clicked. It calls the service\u0026rsquo;s DeletebyIdAsync method to delete the record with the specified ID. If the deletion is successful, it navigates to the specified URL using the NavigationManager.\nUsing the Component:\n\u0026lt;BlazorAppGenericComponents.Components.Delete TModel=\u0026#34;BlogPost\u0026#34; TViewModel=\u0026#34;BlogPostViewModel\u0026#34; Id=\u0026#34;@id\u0026#34; NavigateLinkAfterDelete=\u0026#34;/BlogPost\u0026#34; /\u0026gt; Source Full source code is available at this repository in GitHub: https://github.com/akifmt/DotNetCoding/tree/main/src/BlazorAppGenericComponents\n","date":"August 5, 2023","hero":"/dotnet/2023-08-05-blazor-generic-components/blazor_dotnet.jpg","permalink":"https://akifmt.github.io/dotnet/2023-08-05-blazor-generic-components/","summary":"Blazor Generic Components We will explore a Blazor generic component that can be used for performing CRUD (Create, Read, Update, Delete) operations on a list of items. This component is designed to provide a reusable and efficient solution for displaying and managing data in a Blazor application.\nBlazor: Blazor is a web framework that allows developers to build interactive web UIs using C# instead of JavaScript. It enables full-stack development with .","tags":["Dotnet","Blazor Generic Components"],"title":"Blazor Generic Components"},{"categories":["Dotnet","Blazor Expose a Feed as RSS"],"contents":" Blazor Expose a Feed as RSS In this example, we will explore how to expose a feed as RSS using C# and the Blazor framework. We will create a controller that generates an RSS feed based on mock data.\nRSS (Really Simple Syndication): RSS is a web feed format used to publish frequently updated content, such as blog posts, news headlines, or podcasts. It allows users to subscribe to a website\u0026rsquo;s content and receive updates in a standardized format.\nSyndicationFeed: The SyndicationFeed class represents an RSS or Atom feed. It contains properties like title, description, author, categories, and a collection of SyndicationItem objects.\nSyndicationItem: The SyndicationItem class represents an individual item in an RSS or Atom feed. It contains properties like title, content, author, categories, and a link to the full article.\nRss20FeedFormatter: The Rss20FeedFormatter class is used to format a SyndicationFeed object as an RSS 2.0 feed.\nRSSController.cs RSSController inherits from ControllerBase. It exposes a single GET endpoint (/api/RSS) that returns an RSS feed.\nThe controller has a constructor that takes a MockData object as a parameter. This object is used to retrieve mock blog post data.\n[Route(\u0026#34;api/[controller]\u0026#34;)] [ApiController] public class RSSController : ControllerBase { private readonly MockData _mockData; public RSSController(MockData mockData) { _mockData = mockData; } [HttpGet] public IActionResult Get() { var output = new MemoryStream(); string xml; var Feeds = _mockData.GetAllBlogPosts(); List\u0026lt;SyndicationItem\u0026gt; items = new List\u0026lt;SyndicationItem\u0026gt;(); var feed = new SyndicationFeed(\u0026#34;RSS Feed Title\u0026#34;, \u0026#34;Feed Description\u0026#34;, new Uri(\u0026#34;https://localhost:5001/posts\u0026#34;)); // Set feed properties feed.ImageUrl = new Uri(\u0026#34;https://picsum.photos/600/400\u0026#34;); feed.Authors.Add(new SyndicationPerson(\u0026#34;asd@asd.com\u0026#34;, \u0026#34;asdname\u0026#34;, \u0026#34;https://picsum.photos/600/600\u0026#34;)); feed.BaseUri = new Uri(\u0026#34;https://localhost:5001\u0026#34;); feed.Categories.Add(new SyndicationCategory(\u0026#34;Feed Category 1 Base\u0026#34;)); feed.LastUpdatedTime = DateTime.Now; feed.Language = \u0026#34;Lang1\u0026#34;; feed.Copyright = new TextSyndicationContent(\u0026#34;Copy1\u0026#34;); // Create SyndicationItems for each blog post foreach (var post in Feeds) { var solutionfeed = new SyndicationItem(post.Title, post.Content, new Uri(quot;https://localhost:5001/postsingle/{post.Id}\u0026#34;), post.Id.ToString(), DateTime.Now); solutionfeed.Authors.Add(new SyndicationPerson(\u0026#34;post@user.com\u0026#34;, \u0026#34;postuser\u0026#34;, \u0026#34;https://picsum.photos/600/600\u0026#34;)); solutionfeed.BaseUri = new Uri(\u0026#34;https://localhost:5001/posts\u0026#34;); solutionfeed.Categories.Add(new SyndicationCategory(\u0026#34;Feed Category 1 feed\u0026#34;)); solutionfeed.Contributors.Add(new SyndicationPerson(\u0026#34;postCont@user.com\u0026#34;, \u0026#34;postcontuser\u0026#34;, \u0026#34;https://picsum.photos/600/600\u0026#34;)); solutionfeed.Copyright = new TextSyndicationContent(\u0026#34;feed copy\u0026#34;); solutionfeed.ElementExtensions.Add(new XElement(\u0026#34;enclosure\u0026#34;, new XAttribute(\u0026#34;type\u0026#34;, \u0026#34;\u0026#34;), new XAttribute(\u0026#34;url\u0026#34;, \u0026#34;https://picsum.photos/600/400\u0026#34;), new XAttribute(\u0026#34;width\u0026#34;, 200), new XAttribute(\u0026#34;height\u0026#34;, 200)).CreateReader()); solutionfeed.PublishDate = DateTime.Now; solutionfeed.Summary = new TextSyndicationContent(post.Content.Substring(0, 5)); items.Add(solutionfeed); } // Set the items collection of the feed feed.Items = items; // Create an Rss20FeedFormatter and write the feed to a MemoryStream var formatter = new Rss20FeedFormatter(feed); var xws = new XmlWriterSettings { Encoding = Encoding.UTF8 }; using (var xmlWriter = XmlWriter.Create(output, xws)) { formatter.WriteTo(xmlWriter); xmlWriter.Flush(); } // Read the generated XML from the MemoryStream using (var sr = new StreamReader(output)) { output.Position = 0; xml = sr.ReadToEnd(); sr.Close(); } // Return the XML as a ContentResult with the appropriate content type ContentResult result = Content(xml, \u0026#34;application/xml\u0026#34;, Encoding.UTF8); return result; } } The Get method is responsible for generating the RSS feed. Here\u0026rsquo;s a breakdown of the code:\nCreate a MemoryStream and a string variable to store the generated XML. Retrieve the mock blog post data using the MockData object. Create an empty list of SyndicationItem objects and a SyndicationFeed object. Set the properties of the feed, such as title, description, image URL, authors, categories, and last updated time. Iterate over each blog post and create a SyndicationItem for it. Set the properties of the item, such as title, content, link, author, categories, contributors, enclosure, publish date, and summary. Add the item to the list of items. Set the Items property of the feed to the list of items. Create an Rss20FeedFormatter and write the feed to the MemoryStream using an XmlWriter. Read the generated XML from the MemoryStream into the xml variable. Create a ContentResult with the XML as the content and the appropriate content type. Return the ContentResult. Source Full source code is available at this repository in GitHub: https://github.com/akifmt/DotNetCoding/tree/main/src/BlazorAppRSSFeed\n","date":"August 2, 2023","hero":"/dotnet/2023-08-02-blazor-rssfeed/blazor_dotnet.jpg","permalink":"https://akifmt.github.io/dotnet/2023-08-02-blazor-rssfeed/","summary":"Blazor Expose a Feed as RSS In this example, we will explore how to expose a feed as RSS using C# and the Blazor framework. We will create a controller that generates an RSS feed based on mock data.\nRSS (Really Simple Syndication): RSS is a web feed format used to publish frequently updated content, such as blog posts, news headlines, or podcasts. It allows users to subscribe to a website\u0026rsquo;s content and receive updates in a standardized format.","tags":["Dotnet","Blazor Expose a Feed as RSS"],"title":"Blazor Expose a Feed as RSS"},{"categories":["Dotnet","EF Migrations with Multiple Providers"],"contents":" Blazor Blazor Entity Framework Migrations with Multiple Providers This code demonstrates how to implement multiple database providers in a Blazor application using C#. It allows you to switch between different database providers, such as InMemory, SQLite, and SQL Server, based on the configuration settings.\nDatabase Provider: Refers to the type of database being used, such as InMemory, SQLite, or SQL Server.\nConnection String: A string that contains the necessary information to connect to a specific database.\nEntity Framework: A popular object-relational mapping (ORM) framework that simplifies database access in .NET applications.\nMigrations: A way to manage database schema changes over time, allowing you to update the database structure without losing data.\nDependency Injection: A design pattern that allows objects to be created and managed by a separate container, making it easier to manage dependencies between different components of an application.\nProgram.cs The code consists of two main sections: the Main method and the ServiceCollectionExtensions class.\nIn the Main method:\nIt creates a WebApplication builder. It retrieves the active database provider from the configuration settings. If a provider is specified, it configures the services and connection string for that provider. If the provider is InMemory, it checks and creates the database. It adds necessary services to the container. It builds the application and runs it. In the ServiceCollectionExtensions class:\nIt defines an extension method ConfigureServices for the IServiceCollection interface. It configures the ApplicationDbContext based on the specified provider and connection string. It adds services for SeedData and BlogPostService. It configures AutoMapper for mapping between different models. It creates a mapper instance and adds it as a singleton service. Here are some code examples to illustrate the usage of the code:\nConfiguring the services for SQLite provider:\nservices.ConfigureServices(\u0026#34;Sqlite\u0026#34;, \u0026#34;Data Source=mydatabase.db\u0026#34;); Checking and creating the database:\nservices.CheckAndCreateDatabase(); Using the SeedData service to create initial data:\nvar seedData = serviceProvider.GetRequiredService\u0026lt;SeedData\u0026gt;(); await seedData.CreateInitialData(); appsettings.json The configuration settings for the Blazor application, including the database provider and connection strings.\n{ \u0026#34;DatabaseProvider\u0026#34;: \u0026#34;InMemory\u0026#34;, \u0026#34;ConnectionStrings\u0026#34;: { \u0026#34;Sqlite\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;SqlServer\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Localdb\u0026#34;: \u0026#34;\u0026#34; }, DatabaseProvider: This property specifies the default database provider to be used by the Blazor application. In this example, the value is set to \u0026ldquo;InMemory\u0026rdquo;, which means an in-memory database will be used. You can replace this value with the desired database provider, such as \u0026ldquo;Sqlite\u0026rdquo; or \u0026ldquo;SqlServer\u0026rdquo;.\nConnectionStrings: This property contains a collection of connection strings for different database providers. In this example, three connection strings are provided: \u0026ldquo;Sqlite\u0026rdquo;, \u0026ldquo;SqlServer\u0026rdquo;, and \u0026ldquo;Localdb\u0026rdquo;. Each connection string specifies the necessary details to connect to the respective database provider.\nbuildschema.bat Creating a migration: dotnet ef migrations add Initial01 -c ApplicationDbContext --startup-project ./BlazorAppEFMultipleDBProviders --project ./AppMigrations/AppMigrations.Sqlite -- --DatabaseProvider Sqlite This command adds a new migration named \u0026ldquo;Initial01\u0026rdquo; to the specified context (ApplicationDbContext). It generates the migration files in the ./Migrations/Initial01 directory. The \u0026ndash;startup-project and \u0026ndash;project flags specify the startup project and the project containing the migration files, respectively. The \u0026ndash;DatabaseProvider Sqlite flag indicates that we are using the SQLite database provider.\nGenerating a SQL script for a migration: dotnet ef migrations script -c ApplicationDbContext -o ./AppMigrations/AppMigrations.Sqlite/Migrations/Initial01.sql --startup-project ./BlazorAppEFMultipleDBProviders --project ./AppMigrations/AppMigrations.Sqlite -- --DatabaseProvider Sqlite This command generates a SQL script for the migration named \u0026ldquo;Initial01\u0026rdquo;. The script is saved in the ./AppMigrations/AppMigrations.Sqlite/Migrations/Initial01.sql file. The flags have the same meaning as in the previous command.\nRunning the application with seeding: dotnet run --project ./BlazorAppEFMultipleDBProviders/BlazorAppEFMultipleDBProviders.csproj /seed This command runs the application, specifically the BlazorAppEFMultipleDBProviders.csproj project, with the /seed argument. This argument triggers the seeding of initial data into the database.\nConclusion Configuring multiple database providers in a Blazor application is essential when you need to work with different databases or switch between databases based on the environment. By using the provided JSON configuration, you can easily specify the desired database provider and connection strings for each provider. This flexibility allows your Blazor application to seamlessly interact with different databases, providing a robust and scalable solution.\nThis example demonstrates how to implement multiple database providers in a Blazor application using C#. By configuring the services and connection string based on the specified provider, you can easily switch between different databases. The code also shows how to use migrations and seed data to manage the database schema and initial data.\nSource Full source code is available at this repository in GitHub: https://github.com/akifmt/DotNetCoding/tree/main/src/BlazorAppEFMultipleDBProviders\n","date":"July 31, 2023","hero":"/dotnet/2023-07-31-blazor-ef-multipledbproviders/blazor_dotnet.jpg","permalink":"https://akifmt.github.io/dotnet/2023-07-31-blazor-ef-multipledbproviders/","summary":"Blazor Blazor Entity Framework Migrations with Multiple Providers This code demonstrates how to implement multiple database providers in a Blazor application using C#. It allows you to switch between different database providers, such as InMemory, SQLite, and SQL Server, based on the configuration settings.\nDatabase Provider: Refers to the type of database being used, such as InMemory, SQLite, or SQL Server.\nConnection String: A string that contains the necessary information to connect to a specific database.","tags":["Dotnet","Blazor EF Migrations with Multiple Providers"],"title":"Blazor EF Migrations with Multiple Providers"},{"categories":["Dotnet","Blazor Authentication and Authorization"],"contents":" Blazor Authentication and Authorization This example represents a Blazor application that allows users to view a list of blog posts. The application uses ASP.NET Core and Blazor authentication and authorization to control access to the blog posts.\nBefore diving into the code, let\u0026rsquo;s understand some key concepts related to Blazor:\nBlazor: Blazor is a web framework that allows developers to build interactive web UIs using C# instead of JavaScript. It enables developers to write code that runs on the client-side in the browser using WebAssembly or on the server-side using SignalR.\nASP.NET Core: ASP.NET Core is an open-source, cross-platform framework for building modern, cloud-based web applications. It provides a unified programming model for building web APIs, web UIs, and real-time applications.\nBlazor Authentication and Authorization: Blazor provides built-in support for authentication and authorization. It allows developers to secure their applications by restricting access to certain resources based on user roles or policies.\nRazor: Razor is a syntax for combining HTML markup with C# code in a single file. It is used in Blazor to create dynamic web UIs.\nThe code is structured as a Blazor component with a Razor markup file (.razor) and a code-behind file (.cs). The Razor markup file contains the HTML and Razor syntax for rendering the UI, while the code-behind file contains the C# code for handling events and data manipulation.\nList Posts (Index.razor) The code starts with the @page directive, which specifies the URL route for this component (\u0026quot;/BlogPost\u0026quot;). The @using directives import the necessary namespaces for using classes and services in the code.\nThe @inject directives are used to inject dependencies into the component. In this case, the IMapper, NavigationManager, and BlogPostService are injected. The IMapper is used for object mapping, the NavigationManager is used for navigation, and the BlogPostService is used for retrieving blog posts.\nThe \u0026lt;PageTitle\u0026gt; component sets the page title to \u0026ldquo;Index\u0026rdquo;.\nThe \u0026lt;AuthorizeView\u0026gt; component is used to control access to the content based on the user\u0026rsquo;s authorization. The Policy attribute specifies the policy required to access the content. Inside the \u0026lt;Authorized\u0026gt; block, the UI for displaying the list of blog posts is rendered.\nThe code checks if the blogPosts variable is null. If it is null, a loading message is displayed. Otherwise, a table is rendered with the blog post data. The @foreach loop iterates over each blog post in the blogPosts collection and displays the blog post\u0026rsquo;s ID, title, and content. The AuthorizeView component is used to conditionally render the edit and delete links based on the user\u0026rsquo;s authorization.\nThe \u0026lt;NotAuthorized\u0026gt; block is rendered when the user is not authorized to access the content.\nThe @code block contains the C# code for the component. The blogPosts variable is declared as an IEnumerable\u0026lt;BlogPostViewModel\u0026gt; and is initially set to null. The OnInitializedAsync method is overridden to retrieve the blog posts from the BlogPostService and map them to the BlogPostViewModel using the IMapper.\nCreate Post (Create.razor) Let\u0026rsquo;s take a look at some code examples to better understand how the blog post creation works:\nCreating the BlogPostViewModel:\nprivate BlogPostViewModel? blogPost; protected override void OnInitialized() { blogPost = new(); } In the OnInitialized method, we initialize the blogPost variable as a new instance of the BlogPostViewModel class. This class represents the data structure for the blog post.\nHandling the Valid Submit:\nprivate async void HandleValidSubmit() { var model = Mapper.Map\u0026lt;BlogPostViewModel, BlogPost\u0026gt;(blogPost); bool result = await BlogPostService.AddBlogPostAsync(model); if (result) NavigationManager.NavigateTo(\u0026#34;/BlogPost\u0026#34;); } The HandleValidSubmit method is called when the user clicks the submit button. It maps the blogPost object to the BlogPost model using AutoMapper. Then, it calls the AddBlogPostAsync method of the BlogPostService to add the blog post to the database. If the operation is successful, the user is redirected to the \u0026ldquo;/BlogPost\u0026rdquo; page.\nPost Detail (Details.razor) Here are some key code examples from the Blazor BlogPost Details page:\nRetrieving the blog post data:\nprotected override async Task OnInitializedAsync() { if (blogPost == null) { var result = await BlogPostService.GetbyId(id); if (result != null) blogPost = Mapper.Map\u0026lt;BlogPost, BlogPostViewModel\u0026gt;(result); } } In the OnInitializedAsync method, the blog post data is retrieved from the server using the BlogPostService.GetbyId method. If the result is not null, the data is mapped to a BlogPostViewModel object using AutoMapper and assigned to the blogPost variable.\nDisplaying the blog post details:\n\u0026lt;dl class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;dt class=\u0026#34;col-sm-2\u0026#34;\u0026gt; @nameof(BlogPost.Id) \u0026lt;/dt\u0026gt; \u0026lt;dd class=\u0026#34;col-sm-10\u0026#34;\u0026gt; @blogPost.Id \u0026lt;/dd\u0026gt; \u0026lt;dt class=\u0026#34;col-sm-2\u0026#34;\u0026gt; @nameof(BlogPost.Title) \u0026lt;/dt\u0026gt; \u0026lt;dd class=\u0026#34;col-sm-10\u0026#34;\u0026gt; @blogPost.Title \u0026lt;/dd\u0026gt; \u0026lt;dt class=\u0026#34;col-sm-2\u0026#34;\u0026gt; @nameof(BlogPost.Content) \u0026lt;/dt\u0026gt; \u0026lt;dd class=\u0026#34;col-sm-10\u0026#34;\u0026gt; @blogPost.Content \u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt; The blog post details are displayed using an HTML definition list (\u0026lt;dl\u0026gt;) with rows and columns. The @nameof directive is used to get the name of the properties of the BlogPost class, and the @blogPost variable is used to display the corresponding values.\nEdit Post (Edit.razor) Here are some code examples from the provided code:\nBinding the blogPost.Title property to an input field:\n\u0026lt;InputText @bind-Value=\u0026#34;blogPost.Title\u0026#34; class=\u0026#34;form-control\u0026#34; /\u0026gt; Handling the form submission and updating the blog post:\nprivate async void HandleValidSubmit() { var model = Mapper.Map\u0026lt;BlogPostViewModel, BlogPost\u0026gt;(blogPost); bool result = await BlogPostService.UpdateBlogPostAsync(id, model); if (result) NavigationManager.NavigateTo(\u0026#34;/BlogPost\u0026#34;); } Delete Post (Delete.razor) Let\u0026rsquo;s take a closer look at some code examples to understand the implementation:\nDelete Confirmation:\n\u0026lt;h3\u0026gt;Are you sure you want to delete this?\u0026lt;/h3\u0026gt; Blog Post Details:\n\u0026lt;dl class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;dt class=\u0026#34;col-sm-2\u0026#34;\u0026gt; @nameof(BlogPost.Id) \u0026lt;/dt\u0026gt; \u0026lt;dd class=\u0026#34;col-sm-10\u0026#34;\u0026gt; @blogPost.Id \u0026lt;/dd\u0026gt; \u0026lt;dt class=\u0026#34;col-sm-2\u0026#34;\u0026gt; @nameof(BlogPost.Title) \u0026lt;/dt\u0026gt; \u0026lt;dd class=\u0026#34;col-sm-10\u0026#34;\u0026gt; @blogPost.Title \u0026lt;/dd\u0026gt; \u0026lt;dt class=\u0026#34;col-sm-2\u0026#34;\u0026gt; @nameof(BlogPost.Content) \u0026lt;/dt\u0026gt; \u0026lt;dd class=\u0026#34;col-sm-10\u0026#34;\u0026gt; @blogPost.Content \u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt; Delete Button:\n\u0026lt;button class=\u0026#34;btn btn-danger\u0026#34; @onclick=\u0026#34;DeleteButtonClick\u0026#34;\u0026gt;Delete\u0026lt;/button\u0026gt; | \u0026lt;a href=\u0026#34;/BlogPost\u0026#34;\u0026gt;Back to List\u0026lt;/a\u0026gt; Source Full source code is available at this repository in GitHub: https://github.com/akifmt/DotNetCoding/tree/main/src/BlazorAppAuth\n","date":"July 30, 2023","hero":"/dotnet/2023-07-30-blazor-authentication-authorization/blazor_dotnet.jpg","permalink":"https://akifmt.github.io/dotnet/2023-07-30-blazor-authentication-authorization/","summary":"Blazor Authentication and Authorization This example represents a Blazor application that allows users to view a list of blog posts. The application uses ASP.NET Core and Blazor authentication and authorization to control access to the blog posts.\nBefore diving into the code, let\u0026rsquo;s understand some key concepts related to Blazor:\nBlazor: Blazor is a web framework that allows developers to build interactive web UIs using C# instead of JavaScript. It enables developers to write code that runs on the client-side in the browser using WebAssembly or on the server-side using SignalR.","tags":["Dotnet","Blazor Authentication and Authorization"],"title":"Blazor Authentication and Authorization"},{"categories":["Dotnet","Blazor Radzen CRUD"],"contents":" Blazor Radzen CRUD In this article, we will explore the code for a Blazor page called \u0026ldquo;BlogPost\u0026rdquo;. This page displays a list of blog posts using a RadzenDataGrid component. We will go through the key concepts, code structure, and code examples to understand how this page works.\nBefore diving into the code, let\u0026rsquo;s understand some key concepts related to Blazor and RadzenDataGrid:\nBlazor: Blazor is a web framework that allows developers to build interactive web UIs using C# instead of JavaScript. It enables the development of single-page applications (SPAs) with the power of .NET.\nRadzenDataGrid: RadzenDataGrid is a component provided by Radzen, a popular UI component library for Blazor. It is used to display tabular data with features like sorting, filtering, and paging.\nAutoMapper: AutoMapper is a library used for object-to-object mapping. It simplifies the mapping process between different object types by automatically mapping properties with matching names.\nBlogPostViewModel: BlogPostViewModel is a class that represents the data model for the blog post form. It contains properties for the title and content of the blog post.\nBlogPostService: BlogPostService is a service class responsible for handling CRUD operations related to blog posts. It provides methods for adding, updating, deleting, and retrieving blog posts from the database.\nNavigationManager: NavigationManager is a Blazor service that provides navigation functionality. It allows us to navigate to different pages within the application.\nThe code provided represents the \u0026quot;BlogPost\u0026quot; page in a Blazor application. Let\u0026rsquo;s break down the code structure and understand its different sections:\nPage Directive: The @page \u0026quot;/BlogPost\u0026quot; directive specifies the URL route for this page. It means that when the user navigates to \u0026ldquo;/BlogPost\u0026rdquo;, this page will be displayed.\nPage Directive: The @page directive specifies the URL route for this page. In this case, the page is accessible at \u0026ldquo;/BlogPost/Create\u0026rdquo;.\nRadzenDataGrid Component: The main component on this page is the RadzenDataGrid. It is configured with various properties and columns to display the blog post data.\nUsing Directives: The @using directives import the necessary namespaces for the code to work correctly. We import the AutoMapper, BlazorAppRadzenCRUD.Data, BlazorAppRadzenCRUD.Models, and BlazorAppRadzenCRUD.Services namespaces.\nDependency Injection: The @inject directives inject the required services into the page. We inject the IMapper, NavigationManager, and BlogPostService services.\nPage Content: The page content is wrapped in a \u0026lt;RadzenStack\u0026gt; component, which provides a vertical stack layout for the elements.\nLoading Indicator: If the blogPostViewModel is null, a loading message is displayed. This is useful when the page is still initializing and fetching data.\nBlog Post Form: Once the blogPostViewModel is populated, the blog post form is rendered. The form is wrapped in an \u0026lt;EditForm\u0026gt; component, which handles form validation and submission.\nForm Fields: The form contains two fields: title and content. Each field is wrapped in a \u0026lt;RadzenRow\u0026gt; component, which represents a row in the form layout. The \u0026lt;RadzenColumn\u0026gt; components define the size of the columns within the row.\nInput Fields: The \u0026lt;InputText\u0026gt; components represent the input fields for the title and content. The @bind-Value attribute binds the input field to the corresponding property in the blogPostViewModel.\nValidation: The \u0026lt;DataAnnotationsValidator\u0026gt; and \u0026lt;ValidationSummary\u0026gt; components handle form validation. They display error messages if the user enters invalid data.\nSave Button: The \u0026lt;RadzenButton\u0026gt; component represents the save button. It triggers the form submission when clicked and has a success style.\nBack Button: The \u0026lt;RadzenButton\u0026gt; component represents the back button. It navigates the user back to the blog post index page when clicked.\nCode Block: The @code block contains the C# code for the page. It defines the blogPostViewModel property, initializes it in the OnInitialized method, and handles the form submission and navigation.\nList Posts (Index.razor) Now, let\u0026rsquo;s take a closer look at some important code examples from the provided code:\nLoading Data: private async Task LoadData(LoadDataArgs args) { isLoading = true; var result = await BlogPostService.GetBlogPostsAsync(filter: args.Filter, top: args.Top, skip: args.Skip, orderby: args.OrderBy, count: true); blogPosts = Mapper.Map\u0026lt;IEnumerable\u0026lt;BlogPost\u0026gt;, IEnumerable\u0026lt;BlogPostViewModel\u0026gt;\u0026gt;(result.Result); totalCount = result.TotalCount; isLoading = false; } The LoadData method is responsible for loading the blog post data. It is called when the RadzenDataGrid needs to fetch new data, such as when the user changes the page or applies filters. It makes an asynchronous call to the BlogPostService.GetBlogPostsAsync method to retrieve the data. The result is then mapped to a collection of BlogPostViewModel objects using the Mapper class. Finally, the isLoading flag is updated to indicate the loading state.\nNavigation Methods: private void NavigatetoCreate() =\u0026gt; NavigationManager.NavigateTo(\u0026#34;/BlogPost/Create\u0026#34;); private void NavigatetoDetail(int id) =\u0026gt; NavigationManager.NavigateTo(quot;/BlogPost/Detail/{id}\u0026#34;); private void NavigatetoEdit(int id) =\u0026gt; NavigationManager.NavigateTo(quot;/BlogPost/Edit/{id}\u0026#34;); private void NavigatetoDelete(int id) =\u0026gt; NavigationManager.NavigateTo(quot;/BlogPost/Delete/{id}\u0026#34;); These methods handle the navigation to different pages related to the blog posts. For example, NavigatetoCreate navigates to the page for creating a new blog post, NavigatetoDetail navigates to the page for viewing the details of a specific blog post, and so on. The NavigationManager class is used to perform the navigation by specifying the desired URL.\nCreate Post (Create.razor) Here are some code examples to illustrate the concepts discussed above:\nMapping the BlogPostViewModel to BlogPost:\nvar blogPost = Mapper.Map\u0026lt;BlogPostViewModel, BlogPost\u0026gt;(blogPostViewModel); In this example, we use AutoMapper to map the properties of the blogPostViewModel to the corresponding properties of the BlogPost model.\nAdding a new blog post:\nbool result = await BlogPostService.AddBlogPostAsync(blogPost); Here, we call the AddBlogPostAsync method of the BlogPostService to add the new blog post to the database. The method returns a boolean value indicating the success of the operation.\nNavigating to the blog post index page:\nNavigationManager.NavigateTo(\u0026#34;/BlogPost\u0026#34;); This code snippet uses the NavigationManager to navigate the user back to the blog post index page (\u0026quot;/BlogPost\u0026quot;) after a successful save operation.\nPost Detail (Detail.razor) Here is an example of how the code retrieves the blog post data and maps it to the view model:\nprotected override async Task OnInitializedAsync() { if (blogPostViewModel == null) { var blogPost = await BlogPostService.GetbyId(id); if (blogPost == null) return; blogPostViewModel = Mapper.Map\u0026lt;BlogPost, BlogPostViewModel\u0026gt;(blogPost); } } In this example, the GetbyId method of the BlogPostService is called to retrieve the blog post data based on the provided ID. If the blog post is found, it is then mapped to the BlogPostViewModel using AutoMapper.\nEdit Post (Edit.razor) Here are some key code examples from the provided code:\nBinding the input fields to the blogPostViewModel properties:\n\u0026lt;InputText id=\u0026#34;title\u0026#34; class=\u0026#34;form-control\u0026#34; placeholder=\u0026#34;Title\u0026#34; @bind-Value=\u0026#34;blogPostViewModel.Title\u0026#34; /\u0026gt; The @bind-Value directive binds the value of the input field to the Title property of the blogPostViewModel.\nHandling the form submission:\n\u0026lt;EditForm Context=\u0026#34;editFormEdit\u0026#34; Model=\u0026#34;@blogPostViewModel\u0026#34; OnValidSubmit=\u0026#34;HandleValidSubmit\u0026#34;\u0026gt; ... \u0026lt;RadzenButton Text=\u0026#34;Save\u0026#34; Icon=\u0026#34;save\u0026#34; ButtonType=\u0026#34;ButtonType.Submit\u0026#34; ButtonStyle=\u0026#34;ButtonStyle.Success\u0026#34; /\u0026gt; \u0026lt;/EditForm\u0026gt; The OnValidSubmit event handler is triggered when the form is submitted and passes the form data to the HandleValidSubmit method.\nNavigating to the blog post index page:\nprivate void NavigatetoBlogPostIndex() =\u0026gt; NavigationManager.NavigateTo(\u0026#34;/BlogPost\u0026#34;); The NavigatetoBlogPostIndex method uses the NavigationManager service to navigate to the blog post index page.\nDelete Post (Delete.razor) The code example provided includes the following key components:\nRetrieving the Blog Post Details:\nprotected override async Task OnInitializedAsync() { if (blogPostViewModel == null) { var blogPost = await BlogPostService.GetbyId(id); if (blogPost == null) return; blogPostViewModel = Mapper.Map\u0026lt;BlogPost, BlogPostViewModel\u0026gt;(blogPost); } } This method is executed when the page is initialized. It retrieves the blog post details using the BlogPostService and maps the retrieved BlogPost object to a BlogPostViewModel object using AutoMapper. The blogPostViewModel property is then set to the mapped object.\nDeleting the Blog Post:\nprivate async void RemoveButtonClick() { bool result = await BlogPostService.DeletebyIdAsync(id); if (result) NavigationManager.NavigateTo(\u0026#34;/BlogPost\u0026#34;); } This method is called when the \u0026ldquo;REMOVE\u0026rdquo; button is clicked. It calls the DeletebyIdAsync method of the BlogPostService to delete the blog post with the specified ID. If the deletion is successful, the user is redirected to the blog post index page using the NavigationManager.\nNavigating to the Blog Post Index Page:\nprivate void NavigatetoBlogPostIndex() =\u0026gt; NavigationManager.NavigateTo(\u0026#34;/BlogPost\u0026#34;); This method is called when the \u0026ldquo;Back\u0026rdquo; button is clicked. It uses the NavigationManager to navigate to the blog post index page.\nSource Full source code is available at this repository in GitHub: https://github.com/akifmt/DotNetCoding/tree/main/src/BlazorAppRadzenCRUD\n","date":"July 26, 2023","hero":"/dotnet/2023-07-26-blazor-radzen-crud/blazor_radzen_dotnet.jpg","permalink":"https://akifmt.github.io/dotnet/2023-07-26-blazor-radzen-crud/","summary":"Blazor Radzen CRUD In this article, we will explore the code for a Blazor page called \u0026ldquo;BlogPost\u0026rdquo;. This page displays a list of blog posts using a RadzenDataGrid component. We will go through the key concepts, code structure, and code examples to understand how this page works.\nBefore diving into the code, let\u0026rsquo;s understand some key concepts related to Blazor and RadzenDataGrid:\nBlazor: Blazor is a web framework that allows developers to build interactive web UIs using C# instead of JavaScript.","tags":["Dotnet","Blazor Radzen CRUD"],"title":"Blazor Radzen CRUD"},{"categories":["Dotnet","Blazor Radzen SearchComponent"],"contents":" Blazor Radzen SearchComponent 1. Blazor Radzen List Page The code provided is a Blazor component that demonstrates how to fetch data from a service and display it in a RadzenDataList component. It also includes a custom search component that allows users to search for specific blog posts.\nBlazor: Blazor is a web framework for building interactive client-side web applications using C# instead of JavaScript. It allows developers to write code in C# that runs on the client-side, eliminating the need for JavaScript. Radzen: Radzen is a set of UI components for Blazor that provides pre-built components for building responsive and interactive web applications. RadzenDataList: RadzenDataList is a component from the Radzen UI library that displays a list of items in a grid-like format. It supports features like paging, sorting, and filtering. RadzenCard: RadzenCard is a component from the Radzen UI library that displays content in a card-like format. It provides a visually appealing way to present data. ComponentSearch: ComponentSearch is a custom search component that allows users to search for specific blog posts. It triggers the search functionality when the user clicks the search button. BlogPostService: BlogPostService is a service that provides methods for fetching blog post data from a backend API. The code starts with the @page directive, which specifies the URL route for this component. In this case, the component is accessible at \u0026ldquo;/fetchdata\u0026rdquo;.\nThe code then includes the necessary @using directives to import the required namespaces and inject the BlogPostService into the component. The component\u0026rsquo;s markup is defined within the \u0026lt;PageTitle\u0026gt; tag. It starts with an \u0026lt;h1\u0026gt; heading that displays the title \u0026ldquo;Blogposts\u0026rdquo; followed by a paragraph explaining the purpose of the component.\nNext, a \u0026lt;RadzenCard\u0026gt; component is used to wrap the search component. The search component is a custom component called ComponentSearch that is defined in a separate file. It is injected into the component using the @using directive and its SearchButtonClick event is bound to the SearchButtonClick method in the code section.\nAfter the search component, a \u0026lt;RadzenDataList\u0026gt; component is used to display the list of blog posts. It is configured with various properties like WrapItems, AllowPaging, IsLoading, LoadData, Data, Count, TItem, PageSize, PagerHorizontalAlign, and ShowPagingSummary. These properties control the behavior and appearance of the data list.\nInside the \u0026lt;RadzenDataList\u0026gt;, a \u0026lt;Template\u0026gt; component is used to define the layout of each item in the list. It contains a \u0026lt;RadzenCard\u0026gt; component that displays the blog post details in a card-like format. The details include the blog post ID, title, and content.\nThe code section contains the C# code that handles the data loading and search functionality. It defines various private fields and properties like itemPageSize, totalCount, isLoading, currentArgs, blogposts, search, and searchProperty.\nThe LoadData method is responsible for fetching the blog post data from the BlogPostService based on the provided arguments. It sets the isLoading flag to true, assigns the current arguments, and calls the GetBlogPostsbyPageAsync method of the BlogPostService. It then assigns the result to the blogposts field and updates the totalCount field. Finally, it sets the isLoading flag to false.\nThe SearchButtonClick method is triggered when the user clicks the search button in the custom search component. It updates the search field with the provided search value and calls the LoadData method to reload the data with the updated search value.\nHere is an example of how to use the RadzenDataList component in a Blazor application:\n\u0026lt;RadzenDataList Data=\u0026#34;@blogposts\u0026#34; PageSize=\u0026#34;10\u0026#34; AllowPaging=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;Template Context=\u0026#34;blogpost\u0026#34;\u0026gt; \u0026lt;div\u0026gt;@blogpost.Title\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;@blogpost.Content\u0026lt;/div\u0026gt; \u0026lt;/Template\u0026gt; \u0026lt;/RadzenDataList\u0026gt; In this example, the RadzenDataList component is bound to a collection of blogposts and is configured to display 10 items per page with paging enabled. The \u0026lt;Template\u0026gt; component is used to define the layout of each item in the list, displaying the title and content of each blog post.\nThe provided code demonstrates how to fetch data from a service and display it in a Blazor component using the Radzen UI library. It also includes a custom search component for filtering the data based on user input. By understanding the key concepts and code structure, you can leverage this code to build similar functionality in your own Blazor applications.\n2. Blazor Radzen Search Component Here is an example of how the search component can be used in a Blazor application:\n\u0026lt;SearchComponent SearchButtonClick=\u0026#34;HandleSearch\u0026#34; /\u0026gt; @code { private async Task HandleSearch(string searchValue) { // Perform search logic here // Example: Call an API endpoint with the search query await SearchService.Search(searchValue); } } In the above example, the SearchComponent is used with the SearchButtonClick event callback. When the user clicks the search button, the HandleSearch method is invoked. Inside the HandleSearch method, you can implement the search logic, such as calling an API endpoint with the search query.\nSource Full source code is available at this repository in GitHub: https://github.com/akifmt/DotNetCoding/tree/main/src/BlazorAppRadzenSearch\n","date":"July 21, 2023","hero":"/dotnet/2023-07-21-blazor-radzen-searchcomponent/blazor_radzen_searchcomponent.jpg","permalink":"https://akifmt.github.io/dotnet/2023-07-21-blazor-radzen-searchcomponent/","summary":"Blazor Radzen SearchComponent 1. Blazor Radzen List Page The code provided is a Blazor component that demonstrates how to fetch data from a service and display it in a RadzenDataList component. It also includes a custom search component that allows users to search for specific blog posts.\nBlazor: Blazor is a web framework for building interactive client-side web applications using C# instead of JavaScript. It allows developers to write code in C# that runs on the client-side, eliminating the need for JavaScript.","tags":["Dotnet","Blazor Radzen SearchComponent"],"title":"Blazor Radzen Search Comp."},{"categories":["Dotnet","Video Player in Blazor"],"contents":" Video Player in Blazor This code provides a video player component in a Blazor application. It allows users to watch videos with controls and captions. The video player is customizable using the Plyr.io library.\nBlazor: Blazor is a web framework that allows developers to build interactive web UIs using C# instead of JavaScript. It enables full-stack development with .NET. Plyr.io: Plyr.io is a JavaScript library that provides a customizable video player with a modern UI. It supports various features like controls, captions, and responsive design.\nThe code is structured as a Blazor component with a Razor markup file (.razor) and a code-behind file (.razor.cs). The Razor markup file defines the UI elements and the code-behind file contains the logic for the component.\nThe code uses the @page directive to define the URL routes for the component. It injects the IJSRuntime service to interact with JavaScript code.\nThe video variable is used to store the selected video. If the video is null, a loading message is displayed. Otherwise, the video player is rendered with the Plyr.io library.\nThe code dynamically generates \u0026lt;source\u0026gt; elements for the video files and \u0026lt;track\u0026gt; elements for the captions. It also provides a fallback download link for browsers that don\u0026rsquo;t support the \u0026lt;video\u0026gt; element.\nThe OnInitializedAsync method is called when the component is initialized. It retrieves the video based on the Id parameter from the Data.VideosData.Videos collection.\nThe OnAfterRenderAsync method is called after the component has been rendered. It loads a custom video player using JavaScript interop. The LoadCustomPlayer function is invoked from a JavaScript file located in the ./js/components/video.js path.\nThe provided code demonstrates how to create a video player component in a Blazor application using the Plyr.io library. It allows users to watch videos with controls and captions. The code can be customized further to meet specific requirements and integrate additional features.\nSource Full source code is available at this repository in GitHub: https://github.com/akifmt/DotNetCoding/tree/main/src/BlazorAppVideoPlayer\n","date":"July 20, 2023","hero":"/dotnet/2023-07-20-blazor-videoplayer/video_player_in_blazor.png","permalink":"https://akifmt.github.io/dotnet/2023-07-20-blazor-videoplayer/","summary":"Video Player in Blazor This code provides a video player component in a Blazor application. It allows users to watch videos with controls and captions. The video player is customizable using the Plyr.io library.\nBlazor: Blazor is a web framework that allows developers to build interactive web UIs using C# instead of JavaScript. It enables full-stack development with .NET. Plyr.io: Plyr.io is a JavaScript library that provides a customizable video player with a modern UI.","tags":["Dotnet","Video Player in Blazor"],"title":"Video Player in Blazor"},{"categories":["Programming","OOP"],"contents":" Programming A programming language is a formal computer language designed to communicate instructions to a machine, particularly a computer. Programming languages can be used to create programs to control the behavior of a machine or to express algorithms. (Source: wikipedia)\nObject Oriented Programming(OOP) Object Oriented Programming(OOP) is a programming paradigm based on the concept of objects, which may contain data, in the form of fields, often known as attributes; and code, in the form of procedures, often known as methods.\nEncapsulation Abstraction Inheritance Polymorphism There are five principles when design a class.\nSRP (The Single Responsibility Principle) A class should have one, and only one, reason to change. OCP (The Open Closed Principle) Should be able to extend any classes\u0026rsquo; behaviors, without modifying the classes.. LSP (The Liskov Substitution Principle) Derived classes must be substitutable for their base classes. ISP (The Interface Segregation Principle) Make fine grained interfaces that are client specific. DIP (The Dependency Inversion Principle) Depend on abstractions, not on concretions. What is Encapsulation (or Information Hiding)? The encapsulation is the inclusion-within a program object-of all the resources needed for the object to function, basically, the methods and the data. In OOP the encapsulation is mainly achieved by creating classes, the classes expose public methods and properties. A class is kind of a container or capsule or a cell, which encapsulate a set of methods, attribute and properties to provide its indented functionalities to other classes. In that sense, encapsulation also allows a class to change its internal implementation without hurting the overall functioning of the system. That idea of encapsulation is to hide how a class does its business, while allowing other classes to make requests of it.\nIn order to modularize/ define the functionality of a one class, that class can uses functions or properties exposed by another class in many different ways. According to Object Oriented Programming there are several techniques classes can use to link with each other. Those techniques are named association, aggregation, and composition.\nAssociation A relationship where all objects have their own lifecycle and there is no owner.\nAggregation A specialised form of Association where all objects have their own lifecycle, but there is ownership and child objects can not belong to another parent object.\nComposition A specialised form of Aggregation and we can call this as a “death” relationship. It is a strong type of Aggregation. Child object does not have its lifecycle and if parent object is deleted, all child objects will also be deleted.\nAbstraction Abstraction is an emphasis on the idea, qualities and properties rather than the particulars (a suppression of detail). The importance of abstraction is derived from its ability to hide irrelevant details and from the use of names to reference objects. Abstraction is essential in the construction of programs. It places the emphasis on what an object is or does rather than how it is represented or how it works. Thus, it is the primary means of managing complexity in large programs.\nGeneralization Generalization is the broadening of application to encompass a larger domain of objects of the same or different type. Programming languages provide generalization through variables, parameterization, generics and polymorphism. It places the emphasis on the similarities between objects. Thus, it helps to manage complexity by collecting individuals into groups and providing a representative which can be used to specify any individual of the group.\nAbstraction and generalization are often used together. Abstracts are generalized through parameterization to provide greater utility. In parameterization, one or more parts of an entity are replaced with a name which is new to the entity. The name is used as a parameter. When the parameterized abstract is invoked, it is invoked with a binding of the parameter to an argument.\n","date":"July 1, 2023","hero":"/posts/2023-07-01-programming/blog18_Programming.jpg","permalink":"https://akifmt.github.io/posts/2023-07-01-programming/","summary":"Programming A programming language is a formal computer language designed to communicate instructions to a machine, particularly a computer. Programming languages can be used to create programs to control the behavior of a machine or to express algorithms. (Source: wikipedia)\nObject Oriented Programming(OOP) Object Oriented Programming(OOP) is a programming paradigm based on the concept of objects, which may contain data, in the form of fields, often known as attributes; and code, in the form of procedures, often known as methods.","tags":["Programming","OOP"],"title":"Programming"},{"categories":["IIS","Node.js","Deployment","Release","iisnode"],"contents":"\nNode.js Deployment and Publishing on IIS - iisnode\nTested on Windows Server 2016 x64 and IIS 10.0. All the requirements for different versions are the same, only the appropriate version for iisnode should be installed.\nRequirements:\nWebPlatformInstaller: WebPlatformInstaller IIS URL Rewrite extension: IIS URL Rewrite extension Node.js: node.js iisnode v0.22.1 x64 : iisnode v0.22.1 x64 After installation, the project should have \u0026ldquo;web.config\u0026rdquo;. The following config example can also be used with Express Framework. The app will be started with server.js. Outputs in the console can be checked from the folder specified with logDirectory. The debug sections in the \u0026ldquo;config\u0026rdquo; should be updated when going to the \u0026ldquo;production\u0026rdquo; phase.\n\u0026lt;configuration\u0026gt; \u0026lt;system.webServer\u0026gt; \u0026lt;httpErrors existingResponse=\u0026#34;PassThrough\u0026#34; /\u0026gt; \u0026lt;handlers\u0026gt; \u0026lt;add name=\u0026#34;iisnode\u0026#34; path=\u0026#34;server.js\u0026#34; verb=\u0026#34;*\u0026#34; modules=\u0026#34;iisnode\u0026#34; /\u0026gt; \u0026lt;/handlers\u0026gt; \u0026lt;iisnode node_env=\u0026#34;%node_env%\u0026#34; nodeProcessCountPerApplication=\u0026#34;1\u0026#34; maxConcurrentRequestsPerProcess=\u0026#34;1024\u0026#34; maxNamedPipeConnectionRetry=\u0026#34;100\u0026#34; namedPipeConnectionRetryDelay=\u0026#34;250\u0026#34; maxNamedPipeConnectionPoolSize=\u0026#34;512\u0026#34; maxNamedPipePooledConnectionAge=\u0026#34;30000\u0026#34; asyncCompletionThreadCount=\u0026#34;0\u0026#34; initialRequestBufferSize=\u0026#34;4096\u0026#34; maxRequestBufferSize=\u0026#34;65536\u0026#34; watchedFiles=\u0026#34;*.js;iisnode.yml\u0026#34; uncFileChangesPollingInterval=\u0026#34;5000\u0026#34; gracefulShutdownTimeout=\u0026#34;60000\u0026#34; loggingEnabled=\u0026#34;true\u0026#34; logDirectory=\u0026#34;C:\\Logs\u0026#34; debuggingEnabled=\u0026#34;true\u0026#34; debugHeaderEnabled=\u0026#34;false\u0026#34; debuggerPortRange=\u0026#34;5058-6058\u0026#34; debuggerPathSegment=\u0026#34;debug\u0026#34; maxLogFileSizeInKB=\u0026#34;128\u0026#34; maxTotalLogFileSizeInKB=\u0026#34;1024\u0026#34; maxLogFiles=\u0026#34;20\u0026#34; devErrorsEnabled=\u0026#34;true\u0026#34; flushResponse=\u0026#34;false\u0026#34; enableXFF=\u0026#34;false\u0026#34; promoteServerVars=\u0026#34;\u0026#34; configOverrides=\u0026#34;iisnode.yml\u0026#34; /\u0026gt; \u0026lt;rewrite\u0026gt; \u0026lt;rules\u0026gt; \u0026lt;rule name=\u0026#34;rulename\u0026#34;\u0026gt; \u0026lt;match url=\u0026#34;/*\u0026#34; /\u0026gt; \u0026lt;action type=\u0026#34;Rewrite\u0026#34; url=\u0026#34;server.js\u0026#34; /\u0026gt; \u0026lt;/rule\u0026gt; \u0026lt;/rules\u0026gt; \u0026lt;/rewrite\u0026gt; \u0026lt;/system.webServer\u0026gt; \u0026lt;/configuration\u0026gt; ","date":"August 8, 2019","hero":"/posts/2019-08-08-iisnode.js/blog17_IISNodejs.png","permalink":"https://akifmt.github.io/posts/2019-08-08-iisnode.js/","summary":"Node.js Deployment and Publishing on IIS - iisnode\nTested on Windows Server 2016 x64 and IIS 10.0. All the requirements for different versions are the same, only the appropriate version for iisnode should be installed.\nRequirements:\nWebPlatformInstaller: WebPlatformInstaller IIS URL Rewrite extension: IIS URL Rewrite extension Node.js: node.js iisnode v0.22.1 x64 : iisnode v0.22.1 x64 After installation, the project should have \u0026ldquo;web.config\u0026rdquo;. The following config example can also be used with Express Framework.","tags":["IIS","Node.js","Deployment","Publish","iisnode"],"title":"Node.js Deployment and Publishing on IIS - iisnode"},{"categories":["NodeJS","Different","Versions","Together","Using"],"contents":"\nCombining NodeJS Versions;\n# Setup: npm install -g nvmw # nvmw install nvmw install v8.12.0 # installation of the versions to be used nvmw use v8.12.0 # Use the specific version # Use: nvmw help # help nvmw install [version] # Version install [version] nvmw uninstall [version] # Uninstall version [version] nvmw use [version] # Change version [version] nvmw ls # List of installed versions NodeJS Releases List: Versions\nNPM: NPM Link\nGithub: Github Link\n","date":"February 10, 2019","hero":"/posts/2019-02-10-nodejsfarklisurumleribiraradakullanma/blog16_NodeJSFarkliSurumleriBiraradaKullanma.png","permalink":"https://akifmt.github.io/posts/2019-02-10-nodejsfarklisurumleribiraradakullanma/","summary":"Combining NodeJS Versions;\n# Setup: npm install -g nvmw # nvmw install nvmw install v8.12.0 # installation of the versions to be used nvmw use v8.12.0 # Use the specific version # Use: nvmw help # help nvmw install [version] # Version install [version] nvmw uninstall [version] # Uninstall version [version] nvmw use [version] # Change version [version] nvmw ls # List of installed versions NodeJS Releases List: Versions","tags":["NodeJS","Different","Versions","Together","Using"],"title":"Combining NodeJS Versions"},{"categories":["Google","Cloud","Ubuntu",16.04,"VNC","Server"],"contents":"\nVNC Server on Google Cloud Ubuntu 16.04;\n# Updates: sudo apt-get update sudo apt-get upgrade # Setup: sudo apt install xfce4 xfce4-goodies tightvncserver vncserver vncserver -kill :1 mv ~/.vnc/xstartup ~/.vnc/xstartup.bak nano ~/.vnc/xstartup xstartup content: #!/bin/bash xrdb $HOME/.Xresources startxfce4 \u0026amp; sudo chmod +x ~/.vnc/xstartup vncserver To connect via Windows: Download link\n","date":"September 21, 2017","hero":"/posts/2017-09-21-googlecloudubuntuvnc/blog15_GoogleCloudUbuntuVNC.jpg","permalink":"https://akifmt.github.io/posts/2017-09-21-googlecloudubuntuvnc/","summary":"VNC Server on Google Cloud Ubuntu 16.04;\n# Updates: sudo apt-get update sudo apt-get upgrade # Setup: sudo apt install xfce4 xfce4-goodies tightvncserver vncserver vncserver -kill :1 mv ~/.vnc/xstartup ~/.vnc/xstartup.bak nano ~/.vnc/xstartup xstartup content: #!/bin/bash xrdb $HOME/.Xresources startxfce4 \u0026amp; sudo chmod +x ~/.vnc/xstartup vncserver To connect via Windows: Download link","tags":["Google","Cloud","Ubuntu",16.04,"VNC","Server"],"title":"VNC Server on Google Cloud Ubuntu"},{"categories":["Torch","OpenCV Installation and Testing"],"contents":"\nOpenCV and Torch installation on Ubuntu 16.04;\n# Updates: sudo apt-get update sudo apt-get upgrade shutdown -r 0 sudo apt-get install git #Torch Installation #Run in terminal in order: git clone https://github.com/torch/distro.git ~/torch --recursive cd ~/torch; bash install-deps; ./install.sh source ~/.bashrc source ~/.profile #OpenCV Installation: sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev 2015-12-21 VERSION 3.1 OpenCV for Linux/Mac cd ~ wget https://github.com/Itseez/opencv/archive/3.1.0.zip --no-check-certificate unzip 3.1.0.zip cd opencv-3.1.0 mkdir build cd build cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_TBB=ON -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_V4L=ON -D INSTALL_C_EXAMPLES=ON -D INSTALL_PYTHON_EXAMPLES=ON -D BUILD_EXAMPLES=ON -D WITH_QT=ON -D WITH_GTK=ON -D WITH_OPENGL=ON .. make sudo make install While in the openCV build folder; source ~/.profile luarocks install cv luarocks install camera luarocks install ffmpeg /// If a luarocks package installation error occurs, run the following line to fix it and install the packages again: /// sudo rm -rf ~/.cache/luarocks IDE: Download link\nKurulumu Test etmek için: Download link , Github link\n","date":"May 27, 2017","hero":"/posts/2017-05-27-torchveopencvkurulum/blog14_torchVeopenCVKurulum.png","permalink":"https://akifmt.github.io/posts/2017-05-27-torchveopencvkurulum/","summary":"OpenCV and Torch installation on Ubuntu 16.04;\n# Updates: sudo apt-get update sudo apt-get upgrade shutdown -r 0 sudo apt-get install git #Torch Installation #Run in terminal in order: git clone https://github.com/torch/distro.git ~/torch --recursive cd ~/torch; bash install-deps; ./install.sh source ~/.bashrc source ~/.profile #OpenCV Installation: sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev 2015-12-21 VERSION 3.1 OpenCV for Linux/Mac cd ~ wget https://github.com/Itseez/opencv/archive/3.1.0.zip --no-check-certificate unzip 3.1.0.zip cd opencv-3.","tags":["Torch","OpenCV Installation and Testing"],"title":"Torch, OpenCV Installation and Test"},{"categories":["epub calibre"],"contents":"\nThe cover pages of some e-books do not appear on other devices due to incompatibility. The solution for this is caliber. It provides the opportunity to edit not only the cover page but also the content. Download link\nTo edit the cover page; It will be enough to edit the following line with the \u0026ldquo;Edit Metadata\u0026rdquo; option or add it if it does not exist.\n\u0026lt;item id=\u0026#34;cover_image\u0026#34; href=\u0026#34;cover.jpg\u0026#34; media-type=\u0026#34;image/jpeg\u0026#34;\u0026gt; ","date":"May 2, 2017","hero":"/posts/2017-05-02-epubcover/blog13_epub.png","permalink":"https://akifmt.github.io/posts/2017-05-02-epubcover/","summary":"\nThe cover pages of some e-books do not appear on other devices due to incompatibility. The solution for this is caliber. It provides the opportunity to edit not only the cover page but also the content. Download link\nTo edit the cover page; It will be enough to edit the following line with the \u0026ldquo;Edit Metadata\u0026rdquo; option or add it if it does not exist.\n\u0026lt;item id=\u0026#34;cover_image\u0026#34; href=\u0026#34;cover.jpg\u0026#34; media-type=\u0026#34;image/jpeg\u0026#34;\u0026gt; ","tags":["epub calibre"],"title":"Edit EPub Cover"},{"categories":["Game Theory","Prisoner Dilemma","Nash Equilibrium"],"contents":"\nGet two people caught. If one testifies against the other and the other remains silent, the witness will be released, and the party who chooses to remain silent will be sentenced to 20 years in prison. If both remain silent, they will be sentenced to 1 year each. If both testify against each other, they will each be sentenced to 5 years.\nThe optimal option of the two is to keep both silent. The player, who is unaware of the other party\u0026rsquo;s decision, will not remain silent and will testify against the other party, not risking the possibility of serving 20 years in prison. By testifying against the other party, he will consent to a shorter prison sentence of 5 years or be released. Here the player will aim at minimizing his loss (maximizing his win). It will be inevitable that the other party will testify by acting rationally under the same conditions.\nThe sole aim of the players is to maximize their own winnings, independently of the other player. Here, the Nash Equilibrium is formed when two individuals act by considering the other\u0026rsquo;s movement and choose the best for their own situation instead of maximum gain.\n","date":"March 16, 2017","hero":"/posts/2017-03-16-prisonersdilemmavenashdengesi/blog11_prisoners-dilemma-kural-tablosu.jpg","permalink":"https://akifmt.github.io/posts/2017-03-16-prisonersdilemmavenashdengesi/","summary":"Get two people caught. If one testifies against the other and the other remains silent, the witness will be released, and the party who chooses to remain silent will be sentenced to 20 years in prison. If both remain silent, they will be sentenced to 1 year each. If both testify against each other, they will each be sentenced to 5 years.\nThe optimal option of the two is to keep both silent.","tags":["Game Theory","Prisoner Dilemma","Nash Equilibrium"],"title":"Game Theory - Prisoner's Dilemma and Nash Equilibrium"},{"categories":["shields.io"],"contents":"\nA tool for the ReadMe files of projects to display the project status in a nicer way. shields.io supports many tools used for project tracking. Travis, Jenkins and even Github allow badges to be added up to the release status of the project on SourceForce.\n","date":"March 16, 2017","hero":"/posts/2017-03-19-shields.io/blog12_shields.io.png","permalink":"https://akifmt.github.io/posts/2017-03-19-shields.io/","summary":"A tool for the ReadMe files of projects to display the project status in a nicer way. shields.io supports many tools used for project tracking. Travis, Jenkins and even Github allow badges to be added up to the release status of the project on SourceForce.","tags":["shields.io"],"title":"shields.io"},{"categories":["bash"],"contents":"\nActive folder: pwd Appearance: ls \u0026#39;Detailed View Parameters: -l *detailed* -lrt *detailed* -d *folder* -r *read* -w *write* -x *execute*\u0026#39; Active Folder Change: cd \u0026lt;folder name\u0026gt; File Creation: touch \u0026lt;filename\u0026gt; Displayed: ctrl+k \u0026#39;delete to the right\u0026#39; echo \u0026#34;hello world\u0026#34; echo \u0026#34;hello coders\u0026#34; \u0026gt; filename \u0026#39;Send output to file\u0026#39; echo $? \u0026#39;Returns the result of the last operation (0 successful)\u0026#39; cat filename \u0026#39;prints file contents\u0026#39; more filename \u0026#39;prints file contents\u0026#39; less filename \u0026#39;prints file contents\u0026#39; nano filename \u0026#39;opens with nano text editor\u0026#39; vim filename \u0026#39;opens with vim text editor\u0026#39; head -n 5 output-1.txt \u0026#39;show first 5 lines\u0026#39; tail -n 5 output-1.txt \u0026#39;show last 5 lines\u0026#39; tail -f log-file.txt \u0026#39;prints the last lines and follows the new incoming lines\u0026#39; Creating Folder: mkdir foldername \u0026#39;Creates folder\u0026#39; Run by Sending or Receiving Content: ./prog \u0026lt; input-1.txt \u0026#39;Executes the content of input-1 by sending it to the prog.\u0026#39; ./my-prog \u0026lt; input-1.txt \u0026gt; output-1.txt \u0026#39;assigns output to output\u0026#39; ./my-prog 12 2\u0026gt; output-1.txt \u0026#39;redirects input from stderr to output\u0026#39; ./my-prog \u0026lt; input-1.txt \u0026gt; all-output.txt 2\u0026gt;\u0026amp;1 \u0026#39;stderr, redirect to stdoutput\u0026#39; echo \u0026#34;asdasd\u0026#34; \u0026gt;\u0026gt; log-file.txt \u0026#39;add to end of file\u0026#39; Compilation: gcc -o my-prog my-prog.c \u0026#39;compiles with gcc.\u0026#39; Search in Process: ps aux | grep my-prog \u0026#39;do not search among running processes\u0026#39; Process Operations: \u0026#39;All processes start with: 0:stdinput 1:stdoutput 2:stderror\u0026#39; \u0026#39;The system proc folder where processes are kept.\u0026#39; \u0026#39; ctrl+c : interrupt (sigint) (sigterm) (sighup) -\u0026gt; updates the configuration (sigkill) -\u0026gt; kills without question ctrl+l : clear terminal does the action ctrl+d : (end of stream) kills the active process running \u0026#39; kill -l\t\u0026#39;shows list of signals for kill\u0026#39; kill -INT 12334\t\u0026#39;sends sigint signal\u0026#39; kill -TERM 12334\t\u0026#39;kills with sigterm signal\u0026#39; cat cmdline \u0026#39;running location\u0026#39; cat environ \u0026#39;process in environment variables\u0026#39; cat limits \u0026#39;process limits\u0026#39; top \u0026#39;shows transactions momentarily\u0026#39; htop \u0026#39;shows by updating\u0026#39; Path Operations: echo $PATH\t\u0026#39;path content\u0026#39; export PATH=$PATH:/home/vm/deneme\t\u0026#39;add new directory to end of path\u0026#39; Device Transactions: ls /dev \u0026#39;shows all devices\u0026#39; ls -lrt /dev/null \u0026#39;sends output to null\u0026#39; Data transfer: curl http://akifmt.github.io \u0026#39;downloads\u0026#39; curl http://akifmt.github.io \u0026gt; /dev/null \u0026#39;downloads results to null\u0026#39; curl -s http://akifmt.github.io \u0026gt; /dev/null\t\u0026#39;downloads in silent mode, sends results to null\u0026#39; curl http://akifmt.github.io \u0026gt; /dev/null 2\u0026gt;\u0026amp;1\t\u0026#39;forward also incoming from stderr\u0026#39; curl -s https://demo.consul.io/v1/catalog/services \u0026#39;download in silent mode\u0026#39; curl -s https://demo.consul.io/v1/catalog/service/web?pretty \u0026#39;downloads in silent mode\u0026#39; curl -s https://demo.consul.io/v1/catalog/service/web?pretty | grep Address \u0026#39;downloads in silent mode, finds Address lines\u0026#39; curl -s https://demo.consul.io/v1/catalog/service/web?pretty | jq \u0026#39;.[0].Address\u0026#39; \u0026#39;Retrieves the first of the address part\u0026#39; curl -s https://demo.consul.io/v1/catalog/service/web?pretty | jq -r \u0026#39;.[].Address\u0026#39; \u0026#39;Retrieves all Address parts\u0026#39; curl -s https://demo.consul.io/v1/catalog/service/web?pretty | jq -r \u0026#39;.[].Address\u0026#39; | while read serverAddr; do curl -s $serverAddr \u0026gt; $serverAddr.txt; done \u0026#39;Finds all Address lines, sends them to the right, creates a file based on the Address names\u0026#39; File Operations: echo \u0026#34;asd,qwe,qwwww\u0026#34; | cut -d, -f2 \u0026#39;takes the 2nd word after\u0026#39; echo \u0026#34;asd;qwe;qwwww\u0026#34; | cut -d\\; -f2 \u0026#39;; takes the 2nd word after\u0026#39; echo \u0026#34;asd,qwe,qwwww\u0026#34; | awk -F, \u0026#39;{print $2}\u0026#39; \u0026#39;takes the 2nd word after\u0026#39; ls -lrt | awk \u0026#39;{print $9}\u0026#39; \u0026#39;9. print columns\u0026#39; ls -lrt | cat \u0026#39;pipe outputs to the right one\u0026#39; wc -l \u0026#39;line counts\u0026#39; ls -lrt | wc -l \u0026#39;sends results from ls to the right and counts lines\u0026#39; find . -name my-prog \u0026#39;finds names starting with my-prog\u0026#39; find . -type f \u0026#39;finds files\u0026#39; find . -name \u0026#34;*.txt\u0026#34; \u0026#39;finds txt extension\u0026#39; find -name \u0026#34;*.txt\u0026#34; | while read filename; do echo $filename; done \u0026#39;finds txt, sends it to the server, prints it as filename\u0026#39; find -name \u0026#34;*.txt\u0026#34; | while read filename; do rm $filename; done \u0026#39;delete files found\u0026#39; dd if=/dev/zero of=zero-file.txt bs=512 count=2 \u0026#39;Creates 2x512KB empty file. \u0026#39; hexdump zero-file.txt \u0026#39;Displays in hex and abbreviated repetitive parts.\u0026#39; hexdump -v zero-file.txt \u0026#39;shows all without abbreviations\u0026#39; dd if=/dev/urandom of=random-file.txt bs=512 count=4 \u0026#39;creates 4x512KB file with random value\u0026#39; Operations on CPU: dd if=/dev/zero of=null \u0026#39;generates zero to send null to device (uncontrolled cpu load)\u0026#39; stress-ng -c 1 -l 40 \u0026#39;40% load on 1 CPU\u0026#39; stress-ng -c 0 -l 40 \u0026#39;loads 40% on all CPUs\u0026#39; Network Transactions: ifconfig \u0026#39;shows network devices and connections\u0026#39; route -n \u0026#39;shows all access\u0026#39; sudo wondershaper ens33 512 512 \u0026#39;Limits downloading and sending 512Kpbs\u0026#39; sudo wondershaper ens33 clear \u0026#39;removes limits\u0026#39; Satır Sonları (lineending): OS Desc Code Linux LF (line feed) (\\n) Unix CR (carriage return) (\\r) Windows CRLF (carriage return line feed) \\r\\n ","date":"February 24, 2017","hero":"/posts/2017-02-24-linuxbashkomutlari/blog10_bash.png","permalink":"https://akifmt.github.io/posts/2017-02-24-linuxbashkomutlari/","summary":"Active folder: pwd Appearance: ls \u0026#39;Detailed View Parameters: -l *detailed* -lrt *detailed* -d *folder* -r *read* -w *write* -x *execute*\u0026#39; Active Folder Change: cd \u0026lt;folder name\u0026gt; File Creation: touch \u0026lt;filename\u0026gt; Displayed: ctrl+k \u0026#39;delete to the right\u0026#39; echo \u0026#34;hello world\u0026#34; echo \u0026#34;hello coders\u0026#34; \u0026gt; filename \u0026#39;Send output to file\u0026#39; echo $? \u0026#39;Returns the result of the last operation (0 successful)\u0026#39; cat filename \u0026#39;prints file contents\u0026#39; more filename \u0026#39;prints file contents\u0026#39; less filename \u0026#39;prints file contents\u0026#39; nano filename \u0026#39;opens with nano text editor\u0026#39; vim filename \u0026#39;opens with vim text editor\u0026#39; head -n 5 output-1.","tags":["bash"],"title":"Linux Bash Commands"},{"categories":["vmware hyper v"],"contents":"\nTo turn off Hyper-V; As administrator on cmd: bcdedit /set hypervisorlaunchtype off vmware available after reboot.\nTo turn Hyper-V back on As administrator on cmd: bcdedit /set hypervisorlaunchtype auto Hyper-V is available upon reboot.\n","date":"February 22, 2017","hero":"/posts/2017-02-22-hypervmwarebirlikte/blog9_vmwarehyperv.png","permalink":"https://akifmt.github.io/posts/2017-02-22-hypervmwarebirlikte/","summary":"To turn off Hyper-V; As administrator on cmd: bcdedit /set hypervisorlaunchtype off vmware available after reboot.\nTo turn Hyper-V back on As administrator on cmd: bcdedit /set hypervisorlaunchtype auto Hyper-V is available upon reboot.","tags":["vmware hyper v"],"title":"VMware and Hyper-V Combine"},{"categories":["Agile"],"contents":"\nAgile Methodology is a practice-based method for modeling and documenting software systems effectively and efficiently.\nSoftware projects are faced with the danger of failure due to improper use of resources, wrong prioritization and inaccurate understanding of customer demands throughout their lifecycle. According to The Standish Group\u0026rsquo;s 2009 Chaos Report, software projects fail at a rate of 68% worldwide. This has led large companies in Europe and America to try various methods to produce projects with higher productivity, and most companies have adopted Agile software development approaches, which they find most successful in management and practice.\nIncreasing when Agile approaches are applied;\nproject productivity, the ability of the project to adapt quickly to changes, project quality and speed to market of the project In line with this, the success rates of the projects have been increased to 80% and project profitability has been increased with the significant competitive advantage obtained.\nSource: www.acm-software.com/agile\n","date":"February 20, 2017","hero":"/posts/2017-02-20-agile/blog8_agile.jpg","permalink":"https://akifmt.github.io/posts/2017-02-20-agile/","summary":"Agile Methodology is a practice-based method for modeling and documenting software systems effectively and efficiently.\nSoftware projects are faced with the danger of failure due to improper use of resources, wrong prioritization and inaccurate understanding of customer demands throughout their lifecycle. According to The Standish Group\u0026rsquo;s 2009 Chaos Report, software projects fail at a rate of 68% worldwide. This has led large companies in Europe and America to try various methods to produce projects with higher productivity, and most companies have adopted Agile software development approaches, which they find most successful in management and practice.","tags":["Agile"],"title":"Agile"},{"categories":["Docker"],"contents":"What is Docker Docker is an open source project that deploy application. It works like a virtual machine, but better. Using a linux instance, it isolates itself from OS and works more secure. Docker defines itself like that on official website;\nDocker containers wrap a piece of software in a complete filesystem that contains everything needed to run: code, runtime, system tools, system libraries – anything that can be installed on a server. This guarantees that the software will always run the same, regardless of its environment.\nFor more information, www.docker.com\n","date":"November 24, 2016","hero":"/posts/2016-11-24-docker/blog7_docker.png","permalink":"https://akifmt.github.io/posts/2016-11-24-docker/","summary":"What is Docker Docker is an open source project that deploy application. It works like a virtual machine, but better. Using a linux instance, it isolates itself from OS and works more secure. Docker defines itself like that on official website;\nDocker containers wrap a piece of software in a complete filesystem that contains everything needed to run: code, runtime, system tools, system libraries – anything that can be installed on a server.","tags":["Docker"],"title":"What is Docker?"},{"categories":["Android 7 Nougat"],"contents":"\nNew features\nMulti-window / running two apps on the same screen (The most important feature) New notification center Revamped settings menu Notifications settings have been enriched. We will now be able to prevent every notification from appearing. Added the ability to go to the relevant menu of the settings by long pressing the icons in the notification Refreshing battery graph ","date":"November 2, 2016","hero":"/posts/2016-11-02-android7nougat/blog6_android7n_teaser.png","permalink":"https://akifmt.github.io/posts/2016-11-02-android7nougat/","summary":"\nNew features\nMulti-window / running two apps on the same screen (The most important feature) New notification center Revamped settings menu Notifications settings have been enriched. We will now be able to prevent every notification from appearing. Added the ability to go to the relevant menu of the settings by long pressing the icons in the notification Refreshing battery graph ","tags":["Android 7 Nougat"],"title":"Android 7 Nougat"},{"categories":["monte carlo metodu"],"contents":"\nNedir: Rastgele sayılar kullanılarak sistemlerin modellenmesinde kullanılabilir. Sistemin kesin sonucunun olduğu bazı durumlarda, veya olmadığı tüm durumlarda uygulanabilir. Örnek sayısı doğru sonuçlar elde etmede büyük önem taşımaktadır. Pi sayısı hesaplama, yazı tura ve zar hesaplaması örnek gösterilebilir.\nÖrnek: C ile Yazı-Tura double rastgele(){ double r = (double) rand()/RAND_MAX; return r; } int main() { int i, tura, yazi, n; double r, p; printf(\u0026#34;deney sayisini girin: \u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;n); srand( time(NULL) ); for(tura=0, i=1; i\u0026lt;=n; i++){ r = rastgele(); if(r\u0026lt;0.5) tura++; } p = (double) tura/n; yazi = n-tura; printf(\u0026#34;tura sayisi: %d\\n\u0026#34;,tura); printf(\u0026#34;yazi sayisi: %d\\n\u0026#34;,yazi); printf(\u0026#34;Olasiliklar: %lf %lf\\n\u0026#34;,p, 1.0-p); return 0; } ","date":"October 9, 2016","hero":"/posts/2016-10-09-montecarlometodu/blog5_montecarlometodu.png","permalink":"https://akifmt.github.io/posts/2016-10-09-montecarlometodu/","summary":"Nedir: Rastgele sayılar kullanılarak sistemlerin modellenmesinde kullanılabilir. Sistemin kesin sonucunun olduğu bazı durumlarda, veya olmadığı tüm durumlarda uygulanabilir. Örnek sayısı doğru sonuçlar elde etmede büyük önem taşımaktadır. Pi sayısı hesaplama, yazı tura ve zar hesaplaması örnek gösterilebilir.\nÖrnek: C ile Yazı-Tura double rastgele(){ double r = (double) rand()/RAND_MAX; return r; } int main() { int i, tura, yazi, n; double r, p; printf(\u0026#34;deney sayisini girin: \u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;n); srand( time(NULL) ); for(tura=0, i=1; i\u0026lt;=n; i++){ r = rastgele(); if(r\u0026lt;0.","tags":["monte carlo metodu"],"title":"Monte Carlo Method"},{"categories":["Raspberry Pi","Remote Desktop Connection"],"contents":"\nProblem: Raspbery Pi Remote Connection TR Keyboard Not Recognizing Solution: missing km-041f.ini file\nCopy the km-041f.ini file to the /etc/xrdp/ directory on the Raspberry Pi. When xrdp is restarted, TR characters are no longer a problem.\nThe thing to note is that you must access the directory as root.\nThe step I followed; sudo pcmanfm on RasPi Copy the km-041f.ini file to /etc/xrdp/.\nsudo service xrdp restart\nNote: For those who have problems finding the file on the net, I downloaded it from this repo: Link ","date":"September 18, 2016","hero":"/posts/2016-09-18-raspberrypiilerdcbaglantisi/blog4_rasPiRDC.png","permalink":"https://akifmt.github.io/posts/2016-09-18-raspberrypiilerdcbaglantisi/","summary":"\nProblem: Raspbery Pi Remote Connection TR Keyboard Not Recognizing Solution: missing km-041f.ini file\nCopy the km-041f.ini file to the /etc/xrdp/ directory on the Raspberry Pi. When xrdp is restarted, TR characters are no longer a problem.\nThe thing to note is that you must access the directory as root.\nThe step I followed; sudo pcmanfm on RasPi Copy the km-041f.ini file to /etc/xrdp/.\nsudo service xrdp restart\nNote: For those who have problems finding the file on the net, I downloaded it from this repo: Link ","tags":["Raspberry Pi","Remote Desktop Connection"],"title":"Raspberry Pi Remote Desktop Turkish Keyboard Problem"},{"categories":["remote desktop","amazon aws","microsoft azure"],"contents":"\nSince VPS devices on AWS or Azure do not have a real sound card, it is not possible to receive sound on these devices. The solution for this is VA, that is, virtual audio. Our convenient application solution is solved with VAC installation. The application creates a virtual sound driver and directs the sound to our device.\nProblem: Voice over VPS Solution: Virtual Audio Cable 4.15 installation and Setup\nInstall \u0026ldquo;Virtual Audio Cable 4.15\u0026rdquo; that I tested on VPS.\nRDP-Tcp -\u0026gt; client services -\u0026gt; audio in \u0026ldquo;tsconfig.msc\u0026rdquo; on VPS remove the option. Reset VPS.\nAfter this step, the sound is ready.\nDownload link:\nGoogle -\u0026gt; Virtual Audio Cable 4.15 ","date":"August 22, 2016","hero":"/posts/2016-08-22-rdcileawsveazurevpsuzerindevacileses/blog3_vac_teaser.png","permalink":"https://akifmt.github.io/posts/2016-08-22-rdcileawsveazurevpsuzerindevacileses/","summary":"Since VPS devices on AWS or Azure do not have a real sound card, it is not possible to receive sound on these devices. The solution for this is VA, that is, virtual audio. Our convenient application solution is solved with VAC installation. The application creates a virtual sound driver and directs the sound to our device.\nProblem: Voice over VPS Solution: Virtual Audio Cable 4.15 installation and Setup","tags":["remote desktop","amazon aws","microsoft azure"],"title":"Application Sounds on Amazon AWS and Azure with Remote Desktop"},{"categories":["INVICTUS"],"contents":"\nThe company works on cyber security and security training. I also contacted my friend\u0026rsquo;s reference. The sincerity I saw from day one surprised me. I saw a full family relationship in the company, from management to employees. With the experienced team, they included them at every point by providing training on cyber security at a high-level security level, starting from scratch. The company is experienced in cyber security and even works towards becoming a world brand. The training activities of the company in cyber security are also successful enough to be called the first in their field. Thank you to everyone from the company\u0026rsquo;s management to its employees. I would suggest those interested in cyber security to follow the link. Company information is below.\nwww.invictuseurope.com Contact: www.invictuseurope.com/iletisim Education: egitim.invictuseurope.com\n","date":"August 3, 2016","hero":"/posts/2016-08-03-invictusbilisimguvenlikstajyapmak/blog2_invictus_teaser.png","permalink":"https://akifmt.github.io/posts/2016-08-03-invictusbilisimguvenlikstajyapmak/","summary":"The company works on cyber security and security training. I also contacted my friend\u0026rsquo;s reference. The sincerity I saw from day one surprised me. I saw a full family relationship in the company, from management to employees. With the experienced team, they included them at every point by providing training on cyber security at a high-level security level, starting from scratch. The company is experienced in cyber security and even works towards becoming a world brand.","tags":["INVICTUS"],"title":"INVICTUS, Internship in IT Security"},{"categories":["pokemon go","what is it"],"contents":"A game that can be played on mobile platforms. The biggest innovation and feature is virtualized reality technology. Using real location information, it provides a better player experience, catching 722 Pokemon characters, trades and battles. The official introduction is as follows:\n","date":"July 10, 2016","hero":"/posts/2016-07-10-pokemongooynamak/blog1_pokemon_go_logo.png","permalink":"https://akifmt.github.io/posts/2016-07-10-pokemongooynamak/","summary":"A game that can be played on mobile platforms. The biggest innovation and feature is virtualized reality technology. Using real location information, it provides a better player experience, catching 722 Pokemon characters, trades and battles. The official introduction is as follows:","tags":["pokemon go","what is it"],"title":"Playing Pokemon GO!"},{"categories":null,"contents":"Table of contents Table of contents Text Code Python C/C++ Bash Tables Text Some example text\nCode Python def foo(): print (\u0026#34;This is a python function\u0026#34;) C/C++ void foo(){ prinf(\u0026#34;%s\\n\u0026#34;, \u0026#34;This is a C function\u0026#34;) } Bash # This is a bash command cd dir \u0026amp;\u0026amp; echo $PWD; # Return exit 0; Tables Pages Elements 1 Text 2 Code 3 Tables ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://akifmt.github.io/projects/project1/","summary":"Table of contents Table of contents Text Code Python C/C++ Bash Tables Text Some example text\nCode Python def foo(): print (\u0026#34;This is a python function\u0026#34;) C/C++ void foo(){ prinf(\u0026#34;%s\\n\u0026#34;, \u0026#34;This is a C function\u0026#34;) } Bash # This is a bash command cd dir \u0026amp;\u0026amp; echo $PWD; # Return exit 0; Tables Pages Elements 1 Text 2 Code 3 Tables ","tags":null,"title":"project1en"},{"categories":null,"contents":"Table of contents Table of contents Text Code Python C/C++ Bash Tables Text Some example text\nCode Python def foo(): print (\u0026#34;This is a python function\u0026#34;) C/C++ void foo(){ prinf(\u0026#34;%s\\n\u0026#34;, \u0026#34;This is a C function\u0026#34;) } Bash # This is a bash command cd dir \u0026amp;\u0026amp; echo $PWD; # Return exit 0; Tables Pages Elements 1 Text 2 Code 3 Tables ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://akifmt.github.io/projects/project2/","summary":"Table of contents Table of contents Text Code Python C/C++ Bash Tables Text Some example text\nCode Python def foo(): print (\u0026#34;This is a python function\u0026#34;) C/C++ void foo(){ prinf(\u0026#34;%s\\n\u0026#34;, \u0026#34;This is a C function\u0026#34;) } Bash # This is a bash command cd dir \u0026amp;\u0026amp; echo $PWD; # Return exit 0; Tables Pages Elements 1 Text 2 Code 3 Tables ","tags":null,"title":"project2en"}]